<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Life Matrix]]></title>
  <link href="http://hack.the-lifematrix.net/atom.xml" rel="self"/>
  <link href="http://hack.the-lifematrix.net/"/>
  <updated>2015-07-06T18:43:38+08:00</updated>
  <id>http://hack.the-lifematrix.net/</id>
  <author>
    <name><![CDATA[Steven Liu ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[与艾伦·凯的对话]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/06/a-conversation-with-alan-kay/"/>
    <updated>2015-06-30T12:14:50+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/06/a-conversation-with-alan-kay</id>
    <content type="html"><![CDATA[<h3 id="smalltalk">和Smalltalk创造者一起畅谈</h3>

<p>原标题： A Conversation with Alan Kay，Big talk with the creator of Smalltalk—and much more.</p>

<p>原文：<a href="http://queue.acm.org/detail.cfm?id=1039523">http://queue.acm.org/detail.cfm?id=1039523</a>, <a href="http://dl.acm.org/ft_gateway.cfm?id=1039523&amp;ftid=297449&amp;dwn=1"><img src="http://hack.the-lifematrix.net/images/common/icon_pdf.png" alt="" /></a></p>

<p>ACM相关链接：<a href="http://queue.acm.org/listing.cfm? qc_type=interviews&amp;page_title=Interviews">访谈</a>,  <a href="http://queue.acm.org/listing.cfm?item_topic=Programming%20Languages&amp;qc_type=theme_list&amp;filter=Programming%20Languages&amp;page_title=Programming%20Languages&amp;order=desc">编程语言</a></p>

<hr />

<p>When you want to gain a historical perspective on personal computing and programming languages, why not turn to one of the industry’s preeminent pioneers? That would be Alan Kay, winner of last year’s Turing Award for leading the team that invented Smalltalk, as well as for his fundamental contributions to personal computing.</p>

<p>如你想获得有关个人计算和编程语言的历史性观点，为什么不问问业界的某位先驱呢？这可能就是[Alan Kay], 他因为领导团队发明Smalltalk, 以及他对个人计算的根本性贡献，荣获去年的图灵奖。</p>

<p>Kay was one of the founders of the Xerox Palo Alto Research Center (PARC), where he led one of several groups that together developed modern workstations (and the forerunners of the Macintosh), Smalltalk, the overlapping window interface, desktop publishing, the Ethernet, laser printing, and network client-servers.</p>

<p>Kay是施乐帕洛阿尔托研究中心(Xerox Palo Alto Research Center, PARC)的创始人之一，他在那里领导了几个小组中的一个，这些组共同开发了现代工作站(Machintosh的前身)，Smalltalk，重叠式窗口界面，桌面出版，以太网，激光打印，以及网络的客户-服务器。</p>

<p>Prior to his work at PARC, Kay earned a Ph.D. in 1969 from the University of Utah, where he designed a graphical object-oriented personal computer and was a member of the research team that developed pioneering 3-D graphics work for the Advanced Research Projects Agency (ARPA). Kay was also a “slight participant” in the original design of the ARPANet, which later became the Internet. He holds undergraduate degrees in mathematics and molecular biology from the University of Colorado. After leaving Xerox PARC, Kay went on to become chief scientist of Atari, a Fellow of Apple Computer, and vice president of research and development at The Walt Disney Company.</p>

<p>在他工作于PARC之前，Kay于1969年从犹他州立大学获得博士学位。在那里，他设计了一个图形化的面向对象的个人电脑，同时他也是一个研究小组的成员。这个组为高级研究项目管理局(ARPA)开发开创性的3-D图形装置。Kay也是ARPANet原始设计的“少量参与者“”，其后来演变成了互联网。他在科罗拉多州立大学获得数学和分子生物学的研究生学位。离开施乐PARC之后，Kay继续成为Atari的首席科学家，这是苹果电脑的同类，他也是沃特迪斯尼公司的研发副总裁。</p>

<p>Today he is Senior Fellow at Hewlett-Packard Labs and president of Viewpoints Research Institute, a nonprofit organization whose goal is to change how children are educated by creating a sample curriculum with supporting media for teaching math and science. This curriculum will use Squeak as its media, and will be highly interactive and constructive. Kay’s deep interests in children and education have been the catalysts for many of his ideas over the years.</p>

<p>今天，他是惠普公司的高等院士以及Viewpoint研究所的总裁，这是一个非盈利组织，其目标是通过创造带有支持媒体的样本课程来教授数学和科学，从而改变儿童接受教育的方式。这个课程将使用Squeak语言作为媒介，将具有高度交互性和建设性。Kay对儿童和教育的深度兴趣，是他多年来很多创意的催化剂。</p>

<p>In addition to winning the Turing Award, Kay recently received the Draper Prize from the National Academy of Engineering and the Kyoto Prize in Advanced Technology, awarded every four years by the Inamori Foundation.</p>

<p>除了图灵奖，Kay最近从美国国家工程院获得了Draper奖，以及高等技术的Kyoto奖(京都赏)，此奖由Inamori基金会每4年颁发一次。</p>

<p>Guiding our tour through personal computing history with Kay is Stuart Feldman of IBM Research, where he is vice president and on-demand business transformation area strategist. Since joining IBM in 1995, Feldman has also served as vice president for Internet technology and was head of computer science in the research division.</p>

<p>带领我们和Kay一起游览个人计算历史的是IBM研究院的Stuart Feldman，他是研究院的副总裁以及随需应变(on-demand)业务转化领域的战略家。Feldman也曾经作为Internet技术的副总裁，是研究事业部中计算机科学的领导人。</p>

<p>Feldman also spent 11 years at Bellcore, where he held several research management positions in software engineering and computing systems, and 10 years at Bell Labs, where he was a computer science researcher. Feldman was a member of the original Unix team and is best known as the creator of the Make configuration management system and as the author of the first Fortran-77 compiler. He has a Ph.D. in applied mathematics from the Massachusetts Institute of Technology. He is a member of the Queue Advisory Board.</p>

<p>Feldman也在Bellcore(Bell Communications Research)待了11年，在那里他做过多个软件工程和计算系统的研究管理职位，并在Bell实验室待了10年，那里他作为计算机科学研究员。Feldman是原始Unix团队的成员，以Make配置管理系统的创建者和第一个Fortran-77编译器的作者而著称。他从麻省理工学院取得应用数学的博士学位。他是Queue顾问委员会的成员。</p>

<hr />

<p><strong>STUART FELDMAN</strong> One of the topics that some of the younger people on our Queue editorial board keep asking about is the history of programming languages. The Queue board has a bimodal generation distribution, and those members who are in their 20s or 30s seem genuinely confused about where programming languages might actually come from. It’s my observation that we have one big language and one smaller language every decade—that appears to be all the field can afford. Smalltalk is one of those five- or 10-year events.</p>

<p><strong>STUART FELDMAN</strong> 一些更年轻的人在我们Queue编委会上不断问到的一个主题是编程语言的历史。Queue委员会的年龄分布是双峰模式，那些20或30岁的成员普遍对编程语言到底从何而来感到困惑。我的观察是，每十年就有一个主流语言(one big language)和一个较小众的语言，这看起来所有的领域（对编程语言的需要）都能对付。Smalltalk是那些5年或10年的事件之一。</p>

<p><strong>ALAN KAY</strong> In the late 1960s, Jean Sammet was able to track down and chronicle about 3,000 programming languages that were extant then. When things were simpler in a sense—but theoretically harder because the machines were slower, smaller, didn’t have hard drives most of the time, and had bad tools—people nonetheless rolled their own operating systems and programming languages whenever they felt like it. So there are zillions of them around.</p>

<p><strong>ALAN KAY</strong> 在1960年代晚期，Jean Sammet能追溯和记录当时存在大约3000种编程语言。当事情在某种意义上变简单了，但在理论上却更困难了。因为机器更慢更小，多数时没有硬盘驱动器，工具很糟糕。尽管如此，人们运行着他们自己的操作系统和编程语言，只要他们喜欢。因此，到处都有繁多的编程语言和操作系统。</p>

<p>For a <em>Scientific American</em> article 20 years ago, I came up with a facetious sunspot theory, just noting that there’s a major language or two every 101⁄2 years, and in between those periods are what you might call hybrid languages. These could be looked at as either an improvement on the old thing or almost a new thing. I chronicled Fortran as an improvement on an old thing or almost a new thing, and Algol and Lisp were the new thing.</p>

<p>对《科学美国人》20年前的一篇文章，我想出一个俏皮的支持理论，每隔10年半，将有一到两个主要的语言，而在这个期间的语言，你可称为混合语言。这些可看做对旧事物的改进，或者几乎是全新的事物。我将Fortran编目为旧事物的改进或者几乎一个新事物，而Algol和Lisp是新事物。</p>

<p>Then there was Simula, which the designers thought of as an extension of Algol. It was basically a preprocessor to Algol the way C++ was a preprocessor for C. It was a great concept and I was lucky enough to see it as almost a new thing. Smalltalk and Prolog happened in the early 1970s. The predecessor of Prolog was a wonderful thing that Carl Hewitt did in the late 1960s called Planner.</p>

<p>然后是Simula, 设计者们把它看做Algol的扩展。它根本上是Algol的一个预处理器，如同C++对于C是预处理器的方式。这是个伟大的概念，我足够幸运将它看做几乎全新的事物。Smalltalk和Prolog出现在1970年代早期。Prolog的预处理器非常棒，由Carl Hewitt在1960年代晚期完成，叫做Planner。</p>

<p>Perhaps it was commercialization in the 1980s that killed off the next expected new thing. Our plan and our hope was that the next generation of kids would come along and do something better than Smalltalk around 1984 or so. We all thought that the next level of programming language would be much more strategic and even policy-oriented and would have much more knowledge about what it was trying to do. But a variety of different things conspired together, and that next generation actually didn’t show up. One could actually argue—as I sometimes do—that the success of commercial personal computing and operating systems has actually led to a considerable retrogression in many, many respects.</p>

<p>大概是1980年代的商业化扼杀了期待的下一个新事物。我们的计划和希望是下一代的年轻人能一起来干，做一些比1984年前后Smalltalk更好的东西，等等。我们都认为，编程语言的下一层次本应更具战略性，甚至是面向策略的，本应包含更多所尝试去做之事的知识。但是，很多不同的事情凑在一起，让下一代编程语言事实上没有显现出来。事实上有人会认为 - 亦如我偶尔做的 - 商业化个人计算和操作系统的成功实际上导致了在很多很多方面的显著退步。</p>

<p>You could think of it as putting a low-pass filter on some of the good ideas from the ’60s and ’70s, as computing spread out much, much faster than educating unsophisticated people can happen. In the last 25 years or so, we actually got something like a pop culture, similar to what happened when television came on the scene and some of its inventors thought it would be a way of getting Shakespeare to the masses. But they forgot that you have to be more sophisticated and have more perspective to understand Shakespeare. What television was able to do was to capture people as they were.</p>

<p>你可以把它想成，随着计算向外传播远快于教育未开化之人的速度，而对一些来自60或70年代的良好想法放置了低通过滤器。在过去大约25年，我们事实上得到一些好像流行文化的东西，类似于当电视机出现时所发生的。一些发明者的初衷是，电视机是让莎士比亚戏剧走向大众的一个途径，但他们忽略了，为了理解莎士比亚，你必须更加精于世情并有多个视角。电视能够做的是捕捉人们本然的样子。</p>

<p>So I think the lack of a real computer science today, and the lack of real software engineering today, is partly due to this pop culture.</p>

<p>因此我想今天缺少真正的计算机科学，缺少真正的软件工程，部分归因于这一流行文化。</p>

<p><strong>SF</strong> So Smalltalk is to Shakespeare as Excel is to car crashes in the TV culture?</p>

<p><strong>SF</strong> 那么，Smalltalk对于莎士比亚，是否就如同Excel对于电视文化中的车祸？</p>

<p><strong>AK</strong> No, if you look at it really historically, Smalltalk counts as a minor Greek play that was miles ahead of what most other cultures were doing, but nowhere near what Shakespeare was able to do.</p>

<p><strong>AK</strong> 不，如果你真从历史角度去看它，Smalltalk可当做小型的希腊戏剧，比大部分其它文明要领先几英里，但还没有接近莎士比亚所能做的。</p>

<p>If you look at software today, through the lens of the history of engineering, it’s certainly engineering of a sort—but it’s the kind of engineering that people without the concept of the arch did. Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.</p>

<p>如果你从工程的历史透镜去看今天的软件，它的确是某类工程 - 但它是那些对拱形结构都没有概念的人所做的工程。绝大多数今天的软件，非常象用数百万砖块堆积的埃及金字塔，没有结构的一致性，但仅靠蛮力和成千上万的奴隶。</p>

<p><strong>SF</strong> The analogy is even better because there are the hidden chambers that nobody can understand.</p>

<p><strong>SF</strong> 这个类比甚至更绝妙，因为这样里面有，无人能知的暗室。</p>

<p><strong>AK</strong> I would compare the Smalltalk stuff that we did in the ’70s with something like a Gothic cathedral. We had two ideas, really. One of them we got from Lisp: late binding. The other one was the idea of objects. Those gave us something a little bit like the arch, so we were able to make complex, seemingly large structures out of very little material, but I wouldn’t put us much past the engineering of 1,000 years ago.</p>

<p><strong>AK</strong> 我将我们在70年代做的Smalltalk玩意儿，比作哥德式教堂。事实上，我们有两个想法。其一来自Lisp: 延迟绑定。另一个是对象的想法。这些给了我们一些有点象拱形结构的东西，因此我们能够从小的材料中，做出复杂的、看起来大型的结构，但是我不会将我们放到1000年前的工程。</p>

<p>If you look at [Doug] Engelbart’s demo [a live online hypermedia demonstration of the pioneering work that Engelbart’s group had been doing at Stanford Research Institute, presented at the 1968 Fall Joint Computer Conference], then you see many more ideas about how to boost the collective IQ of groups and help them to work together than you see in the commercial systems today. I think there’s this very long lag between what you might call the best practice in computing research over the years and what is able to leak out and be adapted in the much more expedient and deadline-conscious outside world.</p>

<p>如果你看看Englebart的演示，那么你会看见比今天商业系统中更多的创意，关于如何提升团体的共同智商并帮助他们一起工作。我想，在计算研究多年来你可能称之的最佳实践，与能够渗入并被更为应急和注重最终期限的外部世界所采纳的之间，有相当大的延滞。</p>

<p>It’s not that people are completely stupid, but if there’s a big idea and you have deadlines and you have expedience and you have competitors, very likely what you’ll do is take a low-pass filter on that idea and implement one part of it and miss what has to be done next. This happens over and over again. If you’re using early-binding languages as most people do, rather than late-binding languages, then you really start getting locked in to stuff that you’ve already done. You can’t reformulate things that easily.</p>

<p>这并不是说人们都彻头彻尾地愚蠢，但是如果有个大点子而你有最终期限，你有应急手段，还有竞争者，那么很有可能你将做的，就是对那个点子放置低通过滤器，然后实施其中一部分，漏掉下次必须做的。这一而再地发生。如果你使用绝大多数人使用的早期绑定语言(early-binding languages)，而非延迟绑定语言，那么事实上你刚开始就被你已经做的锁定住了。你难以重新规划它。</p>

<p>Let’s say the adoption of programming languages has very often been somewhat accidental, and the emphasis has very often been on how easy it is to implement the programming language rather than on its actual merits and features. For instance, Basic would never have surfaced because there was always a language better than Basic for that purpose. That language was Joss, which predated Basic and was beautiful. But Basic happened to be on a GE timesharing system that was done by Dartmouth, and when GE decided to franchise that, it started spreading Basic around just because it was there, not because it had any intrinsic merits whatsoever.</p>

<p>让我们来说说，编程语言的采纳经常有些偶然性，过去经常是强调实现一个编程语言多么容易，而非它实际的优点和特性。例如，Basic本不该浮出水面，因为对于那个目的已经有一个语言优于它。这个语言是Joss，早于Basic，非常漂亮。但是Basic碰巧在由Dartmouth完成的GE分时系统上，当GE决定经销这系统时，Basic就开始四处被传播，仅仅因为它就在那里，而非有任何内在优点。</p>

<p>This happens over and over again. The languages of Niklaus Wirth have spread wildly and widely because he has been one of the most conscientious documenters of languages and one of the earlier ones to do algorithmic languages using p-codes (pseudocodes)—the same kinds of things that we use. The idea of using those things has a common origin in the hardware of a machine called the Burroughs B5000 from the early 1960s, which the establishment hated.</p>

<p>这又一而再地发生。<a href="https://zh.wikipedia.org/wiki/尼克劳斯·维尔特">Niklaus Wirth</a>的语言野蛮而广泛地传播<em>(注：他发明了Algol W、Pascal、Modula等语言)</em>，是因为他是最勤勤恳恳的语言文档撰写者之一，最早使用p代码(伪代码)作为算法语言的人之一 – 和我们使用的是同一类。使用那些东西的想法有个共同的根源，是在来自1960年代早期称为Burroughs B5000的硬件机器，这是保守派所憎恶的。</p>

<p><strong>SF</strong> Partly because there wasn’t any public information on most of it.</p>

<p><strong>SF</strong> 部分原因是对绝大多数这样的事情，没有任何公开的信息。</p>

<p><strong>AK</strong> Let me beg to differ. I was there, and Burroughs actually hired college graduates to explain that machine to data-processing managers. There was an immense amount of information available. The problem was that the DP managers didn’t want to learn new ways of computing, or even how to compute. IBM realized that and Burroughs didn’t.</p>

<p><strong>AK</strong> 让我说点不同的。我在那里，Burroughs的确雇佣了大学毕业生去向数据处理经理解释那个机器。有大量的信息可用。问题是那个经理不想学习计算的新方式，或甚至如何计算。IBM认识到那点了，但Burroughs没有。</p>

<p><strong>SF</strong> If memory serves, I was fascinated by that machine at the time, but I was unable to get the detail that made me understand it.</p>

<p>如果资金许可，那时我会被这机器迷住的，但是我无法获得让我理解它的细节。</p>

<p><strong>AK</strong> In fact, the original machine had two CPUs, and it was described quite adequately in a 1961 paper by Bob Barton, who was the main designer. One of the great documents was called “The Descriptor” and laid it out in detail. The problem was that almost everything in this machine was quite different and what it was trying to achieve was quite different.</p>

<p><strong>AK</strong> 事实上，原始的机器有两个CPU，这已经在主要设计者Bob Barton于1961年写的一篇文章中非常充分地讨论了。其中一篇伟大的文献被称为“描述子”(Descriptor)，并详细设计了它。问题是这个机器几乎所有的东西都是不同的，而且它试图达到的目标也完全不同。</p>

<p>The reason that line lived on—even though the establishment didn’t like it—was precisely because it was almost impossible to crash it, and so the banking industry kept on buying this line of machines, starting with the B5000. Barton was one of my professors in college, and I had adapted some of the ideas on the first desktop machine that I did. Then we did a much better job of adapting the ideas at Xerox PARC (Palo Alto Research Center).</p>

<p>那条线存活的原因，即使保守派不喜欢它，恰恰是它几乎不可能崩溃，所以从B5000开始，银行业不断地购买这条线的机器。Barton是我大学时的教授之一，我在做第一个桌面机器时采用其中一些想法。然后我们在施乐PARC采纳这些想法做出了更加出色的工作。</p>

<p>Neither Intel nor Motorola nor any other chip company understands the first thing about why that architecture was a good idea.</p>

<p>无论是英特尔还是摩托罗那，或其它任何芯片公司，都不理解这个首要的事情，为什么那个架构是个好点子。</p>

<p>Just as an aside, to give you an interesting benchmark—on roughly the same system, roughly optimized the same way, a benchmark from 1979 at Xerox PARC runs only 50 times faster today. Moore’s law has given us somewhere between 40,000 and 60,000 times improvement in that time. So there’s approximately a factor of 1,000 in efficiency that has been lost by bad CPU architectures.</p>

<p>仅仅插一句，给你一个有趣的指标 - 对大致相同的机器，大致用相同的方式优化，根据施乐Xerox在1979的基准，今天的机器只快了50倍。在这个期间，摩尔定律给了我们大概40000到60000倍的提升。因此，由于糟糕的CPU架构设计，大约有因子为1000倍的效率损失。</p>

<p>The myth that it doesn’t matter what your processor architecture is—that Moore’s law will take care of you—is totally false.</p>

<p>不用在意处理器的架构，摩尔定律将照顾你。这个神话，是完全错误的。</p>

<p><strong>SF</strong> It also has something to do with why some languages succeed at certain times.</p>

<p><strong>SF</strong> 也看看为什么一些语言在特定时间会成功。</p>

<p><strong>AK</strong> Yes, actually both Lisp and Smalltalk were done in by the eight-bit microprocessor—it’s not because they’re eight-bit micros, it’s because the processor architectures were bad, and they just killed the dynamic languages. Today these languages run reasonably because even though the architectures are still bad, the level 2 caches are so large that some fraction of the things that need to work, work reasonably well inside the caches; so both Lisp and Smalltalk can do their things and are viable today. But both of them are quite obsolete, of course.</p>

<p>是的，事实上Lisp和Smalltalk都在8位微处理器上完成 - 这不是因为他们是8位的微指令，而是因为糟糕的处理器架构，它们刚好扼杀了动态语言。今天，这些语言合情合理地运行着，因为即使架构仍然糟糕，但是L2缓冲如此大，有些需要做的事情，在缓冲中能合情合理地良好运行；因此Lisp和Smalltalk可以做他们的事情，它们在今天是可行的语言。但是，当然，它们两个快要过时了。</p>

<p>The stuff that is in vogue today is only about “one-half” of those languages. Sun Microsystems had the right people to make Java into a first-class language, and I believe it was the Sun marketing people who rushed the thing out before it should have gotten out. They made it impossible for the Sun software people to do what needed to be done.</p>

<p>今天在流行的东西，只是那些语言的“一半”。Sun公司有正确的人将Java变成第一流的语言。我相信这是Sun的营销人员在其本该出现之前，赶制出来的。他们使得Sun的软件人员不可能去做需要做的事。</p>

<p><strong>SF</strong> What should Java have had in it to be a first-quality language, not just a commercial success?</p>

<p>为了成为第一流的语言，而非商业的成功，Java本身还需具备什么？</p>

<p><strong>AK</strong> Like I said, it’s a pop culture. A commercial hit record for teenagers doesn’t have to have any particular musical merits. I think a lot of the success of various programming languages is expeditious gap-filling. Perl is another example of filling a tiny, short-term need, and then being a real problem in the longer term. Basically, a lot of the problems that computing has had in the last 25 years comes from systems where the designers were trying to fix some short-term thing and didn’t think about whether the idea would scale if it were adopted. There should be a half-life on software so old software just melts away over 10 or 15 years.</p>

<p>如同我前面说的，这是个流行文化。给十多岁青少年听的流行唱片，不必要有特别的音乐价值。我认为各种编程语言的很大成功是应急式的填坑。Perl是另外一个例子，为了满足细微而短期的需求，却成为更长期内的一个实际麻烦。根本上讲，过去25年中计算方面的很多问题，都来自于这样的系统，设计者试图修复一些事情，并没有思考如果采纳的话，这个点子应具扩展性。软件本该只有一半的寿命<em>(注：过去25年产生的软件)</em>，因此旧软件刚好在10到15年间消逝掉。</p>

<p>It was a different culture in the ’60s and ’70s; the ARPA (Advanced Research Projects Agency) and PARC culture was basically a mathematical/scientific kind of culture and was interested in scaling, and of course, the Internet was an exercise in scaling. There are just two different worlds, and I don’t think it’s even that helpful for people from one world to complain about the other world — like people from a literary culture complaining about the majority of the world that doesn’t read for ideas. It’s futile.</p>

<p>在1960和70年代，有着不同的文化；高级研究项目管理局(ARPA)和帕洛阿尔托研究中心(PARC)的文化，根本上讲，是一种数学/科学性的文化，对扩展性感兴趣。当然，Inernet就是规模化的一个练习。恰恰有两个不同的世界。我不认为，一个世界的人抱怨另一个世界的人甚至有什么帮助，就好像来自一个文学文化的人们抱怨世界上大多数的人不能读懂意思。这是无用的。</p>

<p>I don’t spend time complaining about this stuff, because what happened in the last 20 years is quite normal, even though it was unfortunate. Once you have something that grows faster than education grows, you’re always going to get a pop culture. It’s well known that I tried to kill Smalltalk in the later ’70s. There were a few years when it was the most wonderful thing in the world. It answered needs in a more compact and beautiful way than anything that had been done before. But time moves on. As we learned more and got more ambitious about what we wanted to do, we realized that there are all kinds of things in Smalltalk that don’t scale the way they should—for instance, the reflection stuff that we had in there. It was one of the first languages to really be able to see itself, but now it is known how to do all levels of reflection much better—so we should implement that.</p>

<p>我不想花时间抱怨这个事，因为在过去20年发生的非常正常，即使这是不幸的。一旦你有些东西，它比教育增长得更快，你总会得到一个流行文化。众所周知，我试图在70年代晚期终结Smalltalk。它在一些年头是世界上最漂亮的东西。它用比之前做过的任何东西更为紧致和漂亮的方式去回应需要，但时间在往前走。随着我们学会更多，对我们想做的事更有抱负的时候，我们认识到在Smalltalk中所有种类的事物，不能以它们本该的方式去扩展–例如，发射。它是真正看到它自身的最早的语言之一，但是现在知道了如何更好地做所有层次的反射。因此，我们必须实现之。</p>

<p>We saw after a couple of years that this could be done much better. The object model we saw after a couple of years could be done much better, etc. So the problem is—I’ve said this about both Smalltalk and Lisp—they tend to eat their young. What I mean is that both Lisp and Smalltalk are really fabulous vehicles, because they have a meta-system. They have so many ways of dealing with problems that the early-binding languages don’t have, that it’s very, very difficult for people who like Lisp or Smalltalk to imagine anything else.</p>

<p>几年之后我们看到，这可以做得更好。我们几年之后看到的对象模型可以做得更好，等等。因此，问题是–我曾经说过关于Smalltalk和Lisp，它们常常吃掉它们的幼崽。我的意思是，Lisp和Smalltalk是真正绝妙的载具，因为它们有一个元系统。它们有那些早期绑定语言不具备的如此多的方式去处理问题，以至于对于喜欢Lisp或Smalltalk的人非常难以想象还有其它什么。</p>

<p>Now just to mention a couple of things about Java: it really doesn’t have a full meta-system. It has always had the problem—for a variety of reasons—of having two regimes, not one regime. It has things that aren’t objects, and it has things that it calls objects. It has real difficulty in being dynamic. It has a garbage collector. So what? Those have been around for a long time. But it’s not that great at adding to itself.</p>

<p>现在谈到Java的一些事情：它确实没有一个全面的元系统。它总是因为不同的原因，有一个问题：它存在两个体制，而非一个体制。它有一些不是对象的东西，它有一些称为对象的东西。它成为动态的有实际的困难。它有一个垃圾收集器。那又怎么样？这些已经四处都是很久了。只将垃圾收集器加到它里面，不算高明。</p>

<p>For many years, the development kits for Java were done in C++. That is a telling thing.</p>

<p>在很多年，Java的开发工具用C++完成。这是个有说服力的事情。</p>

<p>We looked at Java very closely in 1995 when we were starting on a major set of implementations, just because it’s a lot of work to do a viable language kernel. The thing we liked least about Java was the way it was implemented. It had this old idea, which has never worked, of having a set of paper specs, having to implement the VM (virtual machine) to the paper specs, and then having benchmarks that try to validate what you’ve just implemented — and that has never resulted in a completely compatible system.</p>

<p>我们在1995年仔细观察Java，当时我们正着手一个主要的实现集，仅仅因为做一个可行的核有很多事情要干。我们最不喜欢的事情，是Java实现的方式。它有这样的陈旧想法，从来没有奏效过，即：定义一组纸面上的规范，要求按照纸面规范去实现VM(虚拟机)，然后用标杆去试图验证你刚刚实现的。这个想法从来没有产生一个完全兼容的系统。</p>

<p>The technique that we had for Smalltalk was to write the VM in itself, so there’s a Smalltalk simulator of the VM that was essentially the only specification of the VM. You could debug and you could answer any question about what the VM would do by submitting stuff to it, and you made every change that you were going to make to the VM by changing the simulator. After you had gotten everything debugged the way you wanted, you pushed the button and it would generate, without human hands touching it, a mathematically correct version of C that would go on whatever platform you were trying to get onto.</p>

<p>我们用在Smalltalk上的技术是用它自己来写虚拟机，因此有一个VM的Smalltalk仿真器，它本质上就是VM的唯一规范。通过将材料提交给它，你可以调试，你可以回答任何问题，关于VM可以做什么。一旦你将所有事情都以你想的方式调试通过，你按一下按钮，不需要人去插手，它将生成一个数学上正确的C版本，可以在你想尝试的任何平台上去运行。</p>

<p>The result is that this system today, called Squeak, runs identically on more than two dozen platforms. Java does not do that. If you think about what the Internet means, it means you have to run identically on everything that is hooked to the Internet. So Java, to me, has always violated one of the prime things about software engineering in the world of the Internet.</p>

<p>这一成果就是，今天称为Squeak的这个系统，在超过20个平台上无差别地运行。Java做不到这点。如果你想想Internet意味着什么，它意味着你必须无差别地运行任何挂在Internet上的东西。因此，Java，对我来说，常常违反关于软件工程在Internet世界的一个初衷。</p>

<p>Once we realized that Java was likely not to be compatible from platform to platform, we basically said we’ll generate our own system that is absolutely compatible from platform to platform, and that’s what we did.</p>

<p>一旦我们认识到，Java可能从平台到平台不兼容，我们从根本上决定，我们将生成我们自己的系统，它在平台到平台之间是绝对兼容的。这就是我们做的。</p>

<p>Anybody can do that. If the pros at Sun had had a chance to fix Java, the world would be a much more pleasant place. This is not secret knowledge. It’s just secret to this pop culture.</p>

<p>任何人都能做到。假使Sun的正方有机会修正Java，世界将会是更为愉悦的地方。这里没有机密的知识。仅仅对这一流行文化是个秘密。</p>

<p><strong>SF</strong> If nothing else, Lisp was carefully defined in terms of Lisp.</p>

<p>如果没有其它的，Lisp是仔细以Lisp的方式定义的。</p>

<p><strong>AK</strong> Yes, that was the big revelation to me when I was in graduate school—when I finally understood that the half page of code on the bottom of page 13 of the Lisp 1.5 manual was Lisp in itself. These were “Maxwell’s Equations of Software!” This is the whole world of programming in a few lines that I can put my hand over.</p>

<p>是的，当我在研究生院时，这对我是个巨大的启示–当我最终理解Lisp 1.5版手册第13页下部的半页代码，是Lisp自己的时候。这就是“软件中的麦克斯韦方程”。整个的编程世界可以放在聊聊几代码中–可以写在我的掌心。</p>

<p>I realized that anytime I want to know what I’m doing, I can just write down the kernel of this thing in a half page and it’s not going to lose any power. In fact, it’s going to gain power by being able to reenter itself much more readily than most systems done the other way can possibly do.</p>

<p>我认识到，任何时候当我想知道我正在做的，我就将这件事的核心写在半页纸上，这没有丧失任何力量。事实上，通过能够更容易地重新进入事情，比大多数系统尽可能用其它方式所能做的，将会获得力量。</p>

<p>All of these ideas could be part of both software engineering and computer science, but I fear—as far as I can tell—that most undergraduate degrees in computer science these days are basically Java vocational training.</p>

<p>所有这些想法，可以是软件工程和计算机科学的一部分。但是我担心–就我的判断–计算机科学里的大多数本科学位，根本上讲，是Java的职业培训。</p>

<p>I’ve heard complaints from even mighty Stanford University with its illustrious faculty that basically the undergraduate computer science program is little more than Java certification.</p>

<p>我从甚至强大的、拥有杰出教师队伍的斯坦福大学那里听到的抱怨是，根本上讲，本科计算机科学课程，没有比Java认证多出什么。</p>

<p><strong>SF</strong> Well, I must admit I was surprised recently when I discovered in a group of very good developers I managed, almost none of them knew C well enough to write expert low-level stuff. All of them were really good Java jocks.</p>

<p><strong>SF</strong> 好的，我必须承认，最近我有些惊讶，当我发现我管理的一个优秀开发人员组成的团队，几乎没有人足够懂C，能写出专家级的底层工作。他们确实都是Java的好手。</p>

<p><strong>AK</strong> In the 1960s Ted Steele spent several years promoting an idea called UNCOL (universal computer-oriented language), and, to me, by a weird and interesting process—mainly because it’s easy to implement—C turned out to be UNCOL. I don’t think any human being should write in it, but it’s a great target for anybody who wants to do multiplatform things—especially if you pick the right subset.</p>

<p><strong>AK</strong> 在1960年代，Ted Steele花了好几年向我推广一个称为UNCOL(universal computer-oriented language，通用面向计算机语言)的想法，通过一个怪诞和有趣的过程，主要是因为它容易实施 - C原来是UNCOL。我不认为任何人必须用它写程序，但是对于任何想做多平台事情的人，它是一个伟大的目标，特别是如果你选择了正确的子集。</p>

<p>The problem with the Cs, as you probably know if you’ve fooled around in detail with them, is that they’re not quite kosher as far as their arithmetic is concerned. They are supposed to be, but they’re not quite up to the IEEE standards. You have to pick a subset of C and you have to have some side information to get to a mathematically perfect transform of your VM.</p>

<p>各种C的问题，正如你可能知道的，如果你已经在细节上虚度时，只要算法被关注，他们就不那么合适。他们假定是，但他们没有完全遵守IEEE标准。你不得不选取C的子集，你必须有一些侧面的信息来得到对你虚拟机(VM)在数学上的完美转化。</p>

<p><strong>SF</strong> To what do you attribute the long-term love of Smalltalk? There is a certain set of languages that I would assert people seem to love, not just use. I know many people who love C. I know very few who love C++, even though they may make their living on it.</p>

<p>你把对Smalltalk长期的热爱归因于什么？有确定的一组语言，我断言人们看起来热爱，而不仅仅是使用。我知道，很多人爱C。我知道很少有人爱C++，尽管他们靠其谋生。</p>

<p><strong>AK</strong> You have to be a different kind of person to love C++. It is a really interesting example of how a well-meant idea went wrong, because [C++ creator] Bjarne Stroustrup was not trying to do what he has been criticized for. His idea was that first, it might be useful if you did to C what Simula did to Algol, which is basically act as a preprocessor for a different kind of architectural template for programming. It was basically for super-good programmers who are supposed to subclass everything, including the storage allocator, before they did anything serious. The result, of course, was that most programmers did not subclass much. So the people I know who like C++ and have done good things in C++ have been serious iron-men who have basically taken it for what it is, which is a kind of macroprocessor. I grew up with macro systems in the early ’60s, and you have to do a lot of work to make them work for you—otherwise, they kill you.</p>

<p><strong>AK</strong> 为了爱C++，你必须成为不同的人。这的确是个有趣的例子，良好用意的想法被搞砸了，因为C++的创造者Bjarne Stroustrup没有试图做那些他被批评的事。他的想法是，首先，如果对C做那些Simula对Algol做的事<em>(注：预处理器</em>，那是可能有用的。其根本上是作为一个预处理器，针对一个不同类的编程架构模板。对于超级程序员，在他们做任何正儿八经的事之前，假定可以子类化任何事物，是最基本的，包括对存储分配器。因此，我所知道的那些喜欢C++，并用它做出漂亮工作的人，是严肃的钢铁侠。他们只使用C++原本做的事，作为一种预处理器。在60年代早期，伴随宏系统而成长，你必须做很多事情来让它们为你工作–否则，它们会杀了你。</p>

<p><strong>SF</strong> Well, C++, after all, was programmed as a macro processor, in essence.</p>

<p>好的，C++，毕竟，本质上，作为一个宏处理器来编写的。</p>

<p><strong>AK</strong> Yes, exactly. But so was Simula.</p>

<p>是的，确实是。但Simula也是这样。</p>

<p><strong>SF</strong> I put Smalltalk in this category of languages that have true devotees—people who genuinely like it or love it, not simply appreciate and use it.</p>

<p>我把Smalltalk放在有真正热爱者的一类语言，人们真正地喜欢或爱它，而非仅仅欣赏或使用它。</p>

<p><strong>AK</strong> In a history of Smalltalk I wrote for ACM, I characterized one way of looking at languages in this way: a lot of them are either the agglutination of features or they’re a crystallization of style. Languages such as APL, Lisp, and Smalltalk are what you might call style languages, where there’s a real center and imputed style to how you’re supposed to do everything. Other languages such as PL/I and, indeed, languages that try to be additive without consolidation have often been more successful. I think the style languages appeal to people who have a certain mathematical laziness to them. Laziness actually pays off later on, because if you wind up spending a little extra time seeing that “oh, yes, this language is going to allow me to do this really, really nicely, and in a more general way than I could do it over here,” usually that comes back to help you when you’ve had a new idea a year down the road. The agglutinative languages, on the other hand, tend to produce agglutinations and they are very, very difficult to untangle when you’ve had that new idea.</p>

<p>在我为ACM写的一个Smalltalk的历史中，我描述一种看待语言的方式：很多语言要么是特性的凝聚，要么是风格的具体化(结晶)。象APL，Lisp和Smalltalk是你所称的风格性语言，它有真正的中心，然后把风格灌输到你假设要做的任何事情上。其它的语言，比如PL/I，那些试图加和特性而不做整合的语言，的确经常更成功。我认为，风格性语言吸引那些有特定数学惰性的人。懒惰实际上在日后有回报的，因为如果你停下来花一点点额外的时间看看“哦，对的，这个语言将允许我的的确确漂亮地做这个事，并以更普遍的方式让我在这儿来做”。而且如果你已经有了一年之后的新想法，这通常会回来帮到你。凝聚性语言，相反，常常产生凝聚性，当你有新想法时，它们非常非常难以解开。</p>

<p>Also, I think the style languages tend to be late-binding languages. The agglutinative languages are usually early-binding. That makes a huge difference in the whole approach. The kinds of bugs you have to deal with, and when you have to deal with them, is completely different.</p>

<p>而且，我认为风格性语言常常是延迟绑定的语言。凝聚性语言通常是早期绑定的。这在整个实现途径上，产生了极大的不同。你必须面对的bug类型，你必须在何时处理它们，都完全不同。</p>

<p>Some people are completely religious about type systems and as a mathematician I love the idea of type systems, but nobody has ever come up with one that has enough scope. If you combine Simula and Lisp—Lisp didn’t have data structures, it had instances of objects—you would have a dynamic type system that would give you the range of expression you need.</p>

<p>一些人对类型系统有完全宗教式的虔诚。作为数学家，我喜爱类型系统的想法，但是没有人曾经拿出过有足够范围的类型系统。如果你将Simula和Lisp综合起来，Lisp没有数据结构，它有对象实例–你将有一个动态类型系统，这会给你你所需的表达式的范围。</p>

<p>It would allow you to think the kinds of thoughts you need to think without worrying about what type something is, because you have a much, much wider range of things. What you’re paying for is some of the checks that can be done at runtime, and, especially in the old days, you paid for it in some efficiencies. Now we get around the efficiency stuff the same way Barton did on the B5000: by just saying, “Screw it, we’re going to execute this important stuff as directly as we possibly can.” We’re not going to worry about whether we can compile it into a von Neumann computer or not, and we will make the microcode do whatever we need to get around these inefficiencies because a lot of the inefficiencies are just putting stuff on obsolete hardware architectures.</p>

<p>这会允许你思考，那些你需要思考的想法，而不需担心类型是什么，因为你有一个非常非常更为宽泛的事物。你要付出的代价是，要做些检查，这可在运行时完成，特别是在旧的时期，你能用有效的方式支付这些代价。现在，我们绕开了Barton在B5000上以相同方式做的有效性东西，仅仅通过说，“上紧螺丝，我们将尽可能直接地执行这个重要的事情”。我们将没去担心我们是否能将其编译到一个冯诺依曼计算机里，以及我们将让微代码执行任何我们需要去绕过这些无效的地方，因为很多无效性仅仅是将事情放在过时的硬件架构上。</p>

<p>I just think that’s a two-culture divide. I’ve seen many meetings where people are unable to communicate just because of the stylistic differences in approaches.</p>

<p>我只是想这是两种文化的分割。我已经看过很多会议中，人们不能沟通，仅仅因为处理风格的不同。</p>

<p><strong>SF</strong> I would characterize style languages as those with a very rigorous kernel that describes them intellectually. As Smalltalk went through a number of revolutions, to what extent did those change the core kernel, as opposed to improving the range of usefulness?</p>

<p>我认为风格性语言的特征是，具有非常严谨的内核，它智能地描述了语言。Smalltalk经历过一些革新，相对于改进实用性的范围，它们在多大程度是对中心核的改变？</p>

<p><strong>AK</strong> We’ll never know the exact answer to your question because during the development of the system, from when Xerox put it out to this day, all the changes happened in a single thread of development at Xerox PARC. To the outside world, Smalltalk has changed almost not at all. Basically, it’s just built on bigger and bigger libraries of different kinds.</p>

<p>对你的问题，很难有确切的答案，因为在开发系统的过程中，从施乐将它创造出来到今天，所有的改变发生在施乐PARC开发的单一线程上。对于外在的世界，Smalltalk几乎没有一点改变。根本上讲，它仅仅是构建在越来越庞大的不同种类的库上。</p>

<p>But the good thing about the changes in Smalltalk was that it never got diluted, and the scope of the practical things you could think about doing in Smalltalk expanded dramatically during the period at Xerox PARC.</p>

<p>但是，关于Smalltalk的改变，好事是它从来没有被稀释过。你能想到用Smalltalk的实际工作的范围，在施乐PARC的期间，急剧地扩展了。</p>

<p>Basically what happened is this vehicle became more and more a programmer’s vehicle and less and less a children’s vehicle—the version that got put out, Smalltalk ’80, I don’t think it was ever programmed by a child. I don’t think it could have been programmed by a child because it had lost some of its amenities, even as it gained pragmatic power.</p>

<p>根本上讲，所发生的是，这个载具越来越变成一个程序员的载具，越来越少地作为儿童的工具–它得以出生的版本， Smalltalk ‘80，我不认为它曾由儿童来编程。我不认为他本应该已由小孩来编程，因为它已经失去了一些便利性，即使它获得了实用的力量。</p>

<p>So the death of Smalltalk in a way came as soon as it got recognized by real programmers as being something useful; they made it into more of their own image, and it started losing its nice end-user features.</p>

<p>因此，Smalltalk的死亡会以这种方式来临，一旦它被实际的程序员认为是有些用；他们按自己的想象去改变它，结果它开始失去了它漂亮的最终用户接口。</p>

<p>But that’s OK. This project that we started in 1995 was to make Squeak as an implementation vehicle for another end-user system for children. That was done quite well and is being used by many, many thousands of children around the world. The other way of looking at this is to realize that <strong><em>computers are made to be programmed by human beings</em></strong>. Let’s just roll our own. Let’s not complain about Java, or even about Smalltalk.</p>

<p>但这挺好的。我们开始于1995年的项目是把Squeak作为一个实现载具，它针对另一个面向孩子的最终用户系统。这件事做得很棒，已经被很多很多世界各地成千上万的孩子使用。看待这事的另一个方式是，认识到<strong><em>计算机做出来，就是为了让人类编程的</em></strong>。就让我们孤军奋战吧。让我们不要抱怨Java，乃至Smalltalk。</p>

<p>In fact, let’s not even worry about Java. Let’s not complain about Microsoft. Let’s not worry about them because we know how to program computers, too, and in fact we know how to do it in a meta-way. We can set up an alternative point of view, and we’re not the only ones who do this, as you’re well aware.</p>

<p>事实上，让我们甚至不要抱怨Java。让我们不要抱怨微软。让我们不要抱怨他们，因为我们知道如何对计算机编程，事实上我们知道如何对之采用元的方式(in a meta-way)。我们可以建立一个替代的视角，我们不是唯一这样做的人，你对此也很清楚。</p>

<p>There are numerous examples on the Internet of people who have gone to one level or another by making their own point of view. Squeak is the most comprehensive because it spans the whole field. It doesn’t require any particular operating system to run because it’s self-sufficient and has a full set of tools and applications and so forth, but there are many interesting functional languages, particularly in Europe, that are of interest.</p>

<p>在互联网上有大量的例子，通过有他们自己的观点，他们达到这个或那个层次。Squeak是最丰富的，因为它扩展到整个领域。它不需要特定的操作系统去运行，因为它是自给自足的，并有完整的工具集和应用等。不过，在欧洲，有很多有趣的函数式语言，很有趣。</p>

<p>One of my favorite old languages is one called Lucid by Ed Ashcroft. It was a beautiful idea. He said, “Hey, look, we can regard a variable as a stream, as some sort of ordered thing of its values and time, and use Christopher Strachey’s idea that everything is wonderful about tail recursion and Lisp, except what it looks like.” When he looked at Lisp, he had a great insight: which was that tail-recursive loops and Lisp are so clean because you’re generating the right-hand side of all the assignment statements before you do any rebinding. So you’re automatically forced to use only old values. You cannot rebind, so there are no race conditions on anything.</p>

<p>我喜欢的一个老的语言，Ed Ashcroft称之为Lucid。这是一个很漂亮的点子。他说，“嘿，看，我们能把变量看做一个流，以它的值和时间为排序，然后用Christopher Strachey的想法，即每件事情都是关于尾部递归和Lisp，除过它看起来的样子”。当他看到Lisp，他有了伟大的洞见：那就是，尾部递归循环和Lisp是如此清晰，因此你在做任何重新绑定之前，你正在生成所有赋值语句的右侧。因此，<strong><em>你自动地被强制只使用旧的值。你不能重新绑定，因此这里没有对任何东西的竞争。</em></strong></p>

<p>You just write down all of those things, and then when you do the tail recursion, you rebind all of those variables with these new values. Strachey said, “I can write that down like a sequential program, as a bunch of simultaneous assignment statements, and a loop that makes it easier to think of.” That’s basically what Lucid did—there is no reason that you have to think recursively for things that are basically iteration, and you can make these iterations as clean as a functional language if you have a better theory about what values are.</p>

<p>你恰恰正在写下所有那些事情，然后当你做尾部递归时，你用这些新值重新绑定所有的那些变量。Strachey说“我能象一个顺序程序一样写下他们，就像一捆同时赋值的语句，以及一个让它容易思考的循环“。这根本上讲，就是Lucid做的，<strong>没有理由你必须用递归方式思考那些本质上是迭代的事物</strong>。如果你有一个更好地关于值是什么的理论，你就能让这些迭代象函数式语言一样干净。</p>

<p>This idea, by the way, was used in [Squeak contributor] Dave Reed’s fantastic thesis for coordinating object siblings where you have one logical object but many physical manifestations of the same object on different machines, and you have to make them track each other by transactions.</p>

<p>顺便说一下，这个想法，在Dave Reed为了协调对象兄弟的美妙命题中也用到，在那里你有一个逻辑的对象，但是在不同机器上有很多相同对象的物理显化，你必须用事务来让他们可跟踪彼此。</p>

<p>The way to get rid of these things (like Smalltalk) is to make something that is much, much more powerful as a computation model and much more expressive for the core programmer who is trying to write programs. In these late programming languages, you can disappear the old guy and just leave the new guy behind. So we are doing that at this moment.</p>

<p>去掉这些事情的方式是做出一些更加更加强大的东西，来作为一个计算模型，并为了那些尝试写程序的核心程序员，要更具表现力。在这些后期的编程语言，你能让旧的家伙消失，而只让新的家伙在幕后。因此，我们现在就在做这些。</p>

<p><strong>SF</strong> What do you think a programming language should achieve and for whom, and then what is the model that goes with that idea?</p>

<p>你认为一个编程语言必须达到什么，并为谁？然后什么是与这个想法相配的模型？</p>

<p><strong>AK</strong> Even if you’re designing for professional programmers, in the end your programming language is basically a user-interface design. You will get much better results regardless of what you’re trying to do if you think of it as a user-interface design. PARC is incorrectly credited with having invented the GUI. Of course, there were GUIs in the ’60s. But I think we did do one good thing that hadn’t been done before, and that was to realize the idea of change being eternal.</p>

<p>即使你正在为专业的程序员设计语言，最终，你的编程语言根本上讲是用户界面设计。如果你将它看做一个用户界面设计，无论你正在尝试做什么，你都会得到更好一些的结果。GUI的发明被错误地归功于PARC。当然，在60年代有很多GUI。但是，我想我们的确做了之前从未做的一件好事，</p>

<p><strong>SF</strong> You never walk in the same river, otherwise known as Strachey streams.</p>

<p><strong>SF</strong> 你不会踏入同一条河流，就如同Strachey流。</p>

<p><strong>AK</strong> The user interface, which is still the predominant approach today, is a user interface as the access to function. If the area is interesting, you eventually wind up with something that looks like the control panel of a nuclear reactor. So this is the agglutination of features.</p>

<p><strong>AK</strong> 用户界面，在今天仍然是主导性的途径，是访问功能的用户界面。如果这个领域有趣，你最终会完成某些东西，看起来像核反应堆的控制面板。因此，这是特性的凝聚。</p>

<p><strong>SF</strong> Yes, a button on every pixel.</p>

<p><strong>SF</strong> 是的，每个像素有个按钮。</p>

<p><strong>AK</strong> Corporate buyers often buy in terms of feature sets. But at PARC our idea was, since you never step in the same river twice, the number-one thing you want to make the user interface be is a learning environment—something that’s explorable in various ways, something that is going to change over the lifetime of the user using this environment. New things are going to come on, and what does it mean for those new things to happen?</p>

<p><strong>AK</strong> 公司采购者经常按照特性集去采购。但是在PARC，我们的想法是，<strong><em>既然你不可能再次踏入同一条河流，你对用户界面想做的第一件事，是让它成为一个学习的环境</em></strong>–可以用不同方式去探索的东西，能够在用户使用这个环境的生命周期中不断改变。新事物总会到来，对于这些会发生的新事物，它(用户界面)意味着什么。</p>

<p>This means improvements not only in the applications but also in the user interface itself. Some of those ideas were quite manifest in the original Macintosh, but are much less manifest in the Macs of today—and of course never really made it to Microsoft. That just wasn’t their way of thinking about things, and I think a programming language is the same way. Even if the user is an absolute expert, able to remember almost everything, I’m always interested in the difference between what you might call stark meaning and adjustable meaning.</p>

<p>这意味着改进不但在应用层面，也在用户界面自身。在早期的Macintosh中，如此的一些想法十分明显，但是在今天的Mac电脑中却非常少见了 - 当然对微软事实上从未有过。这不仅指他们思考事情的方式，我想编程语言也一样。即使用户是绝对的专家，能记住几乎所有事情，我也对简易含义与可调整含义之间的差别，总保持兴趣。</p>

<p>I did quite a bit of study on that over the years to understand the influence of having something that you can read. It’s known that our basic language mechanism for both reading and hearing has a fast and a slow process. The fast process has basically a surface phrasal-size nature, and then there’s a slower one. This is why jokes require pauses; the joke is actually a jump from one context to another, and the slower guy, who is dealing with the real meanings, has to catch up to it.</p>

<p>在过去的一些年头，我做了些研究去理解，你有可阅读之物的影响。众所周知，我们的基础语言机制，对于读或听，有一个快速和一个慢速过程。快速过程根本上讲，具有表面的、短语尺度的特性。然后有一个更慢的过程。这就是为什么笑话需要停顿；笑话事实上是从一个语境跳到另一个语境。反应慢的人，他是在理解实际的意思，不得不跟上这个跳跃。</p>

<p>There have been many, many studies of this. This argues that the surface form of a language, whatever it is, has to be adjustable in some form.</p>

<p>有很多很多这样的研究。这表明，语言的表面形式，无论它是什么，必须以某种形式可调整。</p>

<p><strong>SF</strong> As you probably know, recent research has looked at how different parts of the brain recognize and react to jokes. Physically, they are quite distinct.</p>

<p><strong>SF</strong> 你大概知道，近期的研究已经在关注，大脑的不同部位，如何认出笑话并对之反映。物理上看，它们非常独特。</p>

<p><strong>AK</strong> Yes. All creativity is an extended form of a joke. Most creativity is a transition from one context into another where things are more surprising. There’s an element of surprise, and especially in science, there is often laughter that goes along with the “Aha.” Art also has this element. Our job is to remind us that there are more contexts than the one that we’re in—the one that we think is reality.</p>

<p><strong>AK</strong> 是的。所有创造性是笑话的一种延伸形式。绝大多数的创造性是从一个环境到另一个的跃迁，在后者中事情更为出乎意料。有个惊讶的要素，特别是科学中，经常是大笑之后跟着一个”啊哈”。艺术也有这个要素。我们的工作是让我们忆起，在我们所处的–我们认为是现实的环境之外，还有更多的环境。</p>

<p>In the ’60s, one of the primary goals of the computer science community was to arrive at an extensible language. As far as I know, only three ever actually worked, and the first Smalltalk was one of those three. Another very interesting one was done by Ned Irons, who invented the term syntax-directed compiler and did one of the first ones in the ’60s. He did a wonderful extensible language called Imp.</p>

<p>在60年代，计算机科学社群的一个主要目标是发明一个可延展的语言。就我所知，只有三个实际上做到了，第一代的Smalltalk是三者之一。另一个有趣的语言是由Ned Irons做出，他发明了“术语语法导向”的编译器，然后在60年代做出了首批的其中之一。他做出了一个漂亮的可延展语言，称之为Imp。</p>

<p>One of the things that people realized from these extensible languages is that there is the unfortunate difficulty of making the meta-system easy to use. Smalltalk-72 was actually used by children. You’re always extending the language without realizing it when you are making ordinary classes. The result of this was that you didn’t have to go into a more esoteric place like a compiler compiler—Yacc or something like that—to add some extension to the language.</p>

<p>人们从这些可延展的语言中认识到，做出易于使用的元系统，很不幸，是困难的。Smalltalk-72的确由孩子使用。当你在做普通类时(ordinary classes)，你总是在扩展语言而没认识到。结果是，你不必进入到一个更为神秘的地方，比如编译器的编译器–Yacc或其它类似的–为了给语言添加扩展。</p>

<p>But the flip side of the coin was that even good programmers and language designers tended to do terrible extensions when they were in the heat of programming, because design is something that is best done slowly and carefully.</p>

<p>但是硬币的另一面是，甚至优秀的程序员和语言设计者，也常常做出可怕的扩展，因为最好慢慢地、仔细地做设计。</p>

<p><strong>SF</strong> And late-night extensible programming is unsupportable.</p>

<p><strong>SF</strong> 不支持宵夜式的可延展语言。</p>

<p><strong>AK</strong> Exactly. So Smalltalk actually went from something that was completely extensible to one where we picked a syntax that allowed for a variety of forms of what was fixed, and concentrated on the extensibility of meaning in it.</p>

<p><strong>AK</strong> 的确。因此，Smalltalk事实上来自那些可完全延展到的东西，而达到一个语言，在其中我们选择一个语法，允许各种固定下来的形式，然后我们专心于其中含义的可延展性。</p>

<p>This is not completely satisfactory. One of the things that I think should be done today is to have a fence that you have to hop to forcibly remind you that you’re now in a meta-area—that you are now tinkering with the currency system itself, you are not just speculating. But it should allow you to do it without any other overhead once you’ve crossed this fence, because when you want to do it, you want to do it.</p>

<p>这还没有完全满意。我考虑今天必须做的事情之一是，设置一个围栏，强制你必须跳过去，从而提醒你，你现在处于一个元领域–你现在正在摆弄货币系统本身，你不仅仅是在投机。但是，一旦你跨过了这道围栏，它将允许你这么做，没有任何其它的开销。因为，当你想做的时候，你就是想做它。</p>

<p>I could go on and on. I feel like my answers are quite trivial since nobody really knows how to design a good language, including me.</p>

<p>我会继续往前、往前走。我感觉，我的回答是非常微不足道的，既然没有人真的知道如何设计一个好的语言，包括我。</p>

<p><strong>SF</strong> What do you wish you had done differently in the Smalltalk era?</p>

<p>你希望，在Smalltalk时代，你有什么会做的不同？</p>

<p><strong>AK</strong> I had the world’s greatest group, and I should have made the world’s two greatest groups. I didn’t realize there are benefits to having real implementers and real users, and there are benefits to starting from scratch every few months. I hired finishers because I’m a good starter and a poor finisher, but it took me a long time to realize that I was interfering with them by trying to improve things.</p>

<p>我有世界上最伟大的团队，我本应该建立两个最伟大的团队。我没有认识到，同时拥有真实的实现者和真实的用户，其中的好处，以及每几个月从头开始的好处。我聘用了润饰者(完工者)，因为我是个好的启动者却是个糟糕的润饰者。但是，我花了很长时间才认识到，我为了试图改进事情，正在打扰他们。</p>

<p>I believe that the only kind of science computing can be is like the science of bridge building. Somebody has to build the bridges and other people have to tear them down and make better theories, and you have to keep on building bridges.</p>

<p>我相信，计算科学唯一的类别好似桥梁构建的科学。有些人必须造桥，而其他的人必须拆卸它们并作出更好的理论，而你不得不继续造桥。</p>

<p><strong>SF</strong> And every so often, you have to watch one fall into the drink.</p>

<p><strong>SF</strong> 时不时，你不得不看到有人沉迷于酒中。</p>

<p>© 2004 ACM 1542-7730/04/1200</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concepts in LISP]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/06/concepts-in-lisp/"/>
    <updated>2015-06-01T12:07:42+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/06/concepts-in-lisp</id>
    <content type="html"><![CDATA[<h3 id="forms">Forms</h3>

<p>The things which you type to the LISP interpreter are called forms; the LISP interpreter repeatedly reads a form, evaluates it, and prints the result. This procedure is called the read-eval-print loop.</p>

<p>你键入到Lisp中的东西，称为form。Lisp 反复地读取一个form，对它求值，然后打印结果。这个过程称为，“读取-求值-打印”循环，缩写为REPL。</p>

<p>In general, a form is either an atom (for example, a symbol, an integer, or a string) or a list. If the form is an atom, LISP evaluates it immediately. Symbols evaluate to their value; integers and strings evaluate to themselves. If the form is a list, LISP treats its first element as the name of a function; it evaluates the remaining elements recursively, and then calls the function with the values of the remaining elements as arguments.</p>

<p>通常，一个form要么是原子(例如，符号、整数或字符串)，或者是列表。原子，也称为正常form或自求值form(normal form or self-evaluating form)。符号求值为它们的值；整数和字符串求值为他们自己。如果form是列表，也称为复合form(compound form)。LISP将其第一个元素视为函数名；它迭代地对剩下的元素求值，然后将剩下元素的值作为参数来调用函数。</p>

<h4 id="special-form">Special Form</h4>

<p>A special form is a form with special syntax, special evaluation rules, or both, possibly manipulating the evaluation environment, control flow, or both. A special operator has access to the current lexical environment and the current dynamic environment. Each special operator defines the manner in which its subexpressions are treated—which are forms, which are special syntax, etc. </p>

<p>The set of special operator names is fixed in Common Lisp; no way is provided for the user to define a special operator. The next figure lists all of the Common Lisp symbols that have definitions as special operators.</p>

<p>(来源：<a href="http://www.lispworks.com/documentation/HyperSpec/Body/03_ababa.htm">http://www.lispworks.com/documentation/HyperSpec/Body/03_ababa.htm</a>)</p>

<p>特殊form是一个form, 带有特殊语法或特殊求值规则，或兼有。它可能操纵求值环境、控制流，或兼有。一个特殊的运算符访问当前的词法环境和当前的动态环境。每个特殊的运算符定义了，如何处理其子表达式的方式，哪些是form，哪些是特殊语法，等等。</p>

<p>在Common Lisp中，特殊运算名的集合是固定的。没有给用户提供定义特殊运算符的方式。如下列出了所有作为特殊运算符定义的Common Lisp符号。</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>block</td>
      <td>let*</td>
      <td>return-from</td>
    </tr>
    <tr>
      <td>catch</td>
      <td>load-time-value</td>
      <td>setq</td>
    </tr>
    <tr>
      <td>eval-when</td>
      <td>locally</td>
      <td>symbol-macrolet</td>
    </tr>
    <tr>
      <td>flet</td>
      <td>macrolet</td>
      <td>tagbody</td>
    </tr>
    <tr>
      <td>function</td>
      <td>multiple-value-call</td>
      <td>the</td>
    </tr>
    <tr>
      <td>go</td>
      <td>multiple-value-prog1</td>
      <td>throw</td>
    </tr>
    <tr>
      <td>if</td>
      <td>progn</td>
      <td>unwind-protect</td>
    </tr>
    <tr>
      <td>labels</td>
      <td>progv</td>
      <td> </td>
    </tr>
    <tr>
      <td>let</td>
      <td>quote</td>
      <td> </td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Architechture]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/05/big-data-system-2/"/>
    <updated>2015-05-20T17:03:39+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/05/big-data-system-2</id>
    <content type="html"><![CDATA[<h2 id="what-is-data-system">What is Data System</h2>

<p>query = function(all data)</p>

<h2 id="section">大数据系统的要求</h2>

<p>一个数据系统，就是要向应用提供数据的存储、加工、修改和查询的系统。<a href="http://manning.com/marz/">Big Data</a>一书中，总结大数据系统必须满足如下要求：</p>

<ul>
  <li>容错性
包含两方面，物理容错性和人为容错性
    <ul>
      <li>物理容错性
由于允许数据分区，也就是分布式存储。那不可避免有些机器会宕机或者系统软件等出现故障，导致其不可访问。局部的错误，不会导致整体系统不可访问。</li>
      <li>人为容错性
程序可能有bug, 对数据进行错误的修改。那么应该有办法恢复，然后用修正后的程序重新计算。</li>
    </ul>
  </li>
  <li>
    <p>可扩展性
这是一个广泛使用，但容易引起混淆的概念。这里指的是，通过增加资源，系统在更大负载下，保持性能的能力。尽管系统有扩展性，但<strong>线性扩展性</strong>，才是有意义的。如果是与负载呈平方或者四次方的扩展性，是不实用的。</p>
  </li>
  <li>
    <p>低延迟的读或修改
绝大多数应用对于读，需要很小的延迟，在几毫米到几百毫秒。而对于修改的延迟，不同的应用要求不同，从几毫秒到几小时不等。</p>
  </li>
  <li>
    <p>普遍性(Generalization)
一个普遍的系统应能支持很大范围的应用，比如财务管理系统、社交媒体分析、科学应用、社交网络等等。</p>
  </li>
  <li>
    <p>延展性(Extensibility)
可延展的系统，允许以较小的开发成本增加新的特性或功能。</p>
  </li>
  <li>
    <p>维护最小化(Minimal maintenance)</p>

    <p>维护是对开发者收的税。维护是为了确保系统平滑运行而需要做的工作。最小化维护量的一个重要举措，是选择部署复杂度尽可能小的部件。</p>
  </li>
  <li>
    <p>可调试性(Debuggability)</p>

    <p>一个大数据系统必须在出错时，提供必要的信息来调试系统。其关键是能够追踪，对于系统中的每个值，恰恰是什么导致了这个值。</p>
  </li>
</ul>

<h2 id="lambda-">Lambda 架构</h2>

<p>本书主要是介绍Lambda架构，作为大数据的新范式，见下图：</p>

<p><img src="../images/bigdata/LambdaArchitecture.png" alt="" /></p>

<p>Lambda架构认为，</p>

<ul>
  <li>batch view = function(all data)</li>
  <li>realtime view = function(realtime view, new data)</li>
  <li>query = function(batch view. realtime view)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Big Data System?]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/05/big-data-system-1/"/>
    <updated>2015-05-08T10:38:19+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/05/big-data-system-1</id>
    <content type="html"><![CDATA[<p><a href="http://nathanmarz.com">Nathan Marz</a> 的新书 <a href="http://manning.com/marz/">Big Data</a> 对大数据系统及Lambda架构有深入和详尽的讨论。加上自己对数据库使用的多年经验和思考，准备写一组博文，作为读书笔记和思考总结。</p>

<h2 id="section">为何大数据</h2>

<p>大数据是与互联网相伴而生的。传统的应用系统和数据库，都是针对企业层面的应用，而且主要用于事务处理。企业也只是占据整个市场的一定份额，因此数据量有限。而由于网络的规模效应，在互联网上更容易产生“赢者通吃”的结果，所以互联网企业往往面对的是社会化的普遍需求，用户数、数据量和访问量都巨大。大数据表现在：</p>

<ul>
  <li>
    <p>数据量大</p>

    <p>用户数少则几百万，上千万，过亿很普遍。随着商业的繁荣、市场细分和个性化需求的挖掘，商品数SKU，经常达到几十万。日均交易上千万笔。
 搜索引擎的网页数据库，也达到几千TB。</p>
  </li>
  <li>
    <p>访问量
 无论是读取(浏览、查询)还是写入(修改、增加)</p>
  </li>
  <li>数据多样化
 除过通常的交易类数据，还有：
    <ul>
      <li>文档</li>
      <li>网页
搜索引擎的网页缓存</li>
      <li>图片
Facebook, 微信, Flickr的图片分享</li>
      <li>视频</li>
      <li>搜索引擎的索引数据库
 这些都不是RDBMS擅长管理的。</li>
    </ul>
  </li>
  <li>数据处理方式
除过事务型处理外，还有批量处理，如机器学习、在线学习、流式处理等。</li>
</ul>

<h2 id="section-1">为什么需要大数据系统</h2>

<p>大家对关系型数据库(RDBMS)并不陌生。早期的商业系统主要为了处理交易，比如银行存取款、证券交易、销售、采购、订票等。这也称为OLTP(在线事务处理)系统。其对数据操作的特点是，基于索引定位的单记录(少数记录)操作较多，读写随机，而且高并发性，数据记录的改变反映了资源的变化、状态的迁移或相关活动的触发。OLTP属于业务关键性应用，所以数据的一致性、并发控制和容错，至关重要。而RDBMS比较完美地解决了OLTP对持久化存储的需要，因而占据了主导地位。RDBMS有很多共性：</p>

<ul>
  <li>逻辑结构
    <ul>
      <li>基于关系代数的逻辑结构和建模方法</li>
      <li>SQL结构化查询语言</li>
    </ul>
  </li>
  <li>数据一致性保证
    <ul>
      <li>事务处理</li>
      <li>锁机制</li>
      <li>日志</li>
    </ul>
  </li>
  <li>容错
    <ul>
      <li>数据文件镜像</li>
      <li>备份与恢复</li>
      <li>高可用性复制</li>
    </ul>
  </li>
</ul>

<p>那么为什么会有大数据和NoSQL数据库的出现呢？这就要说到RDBMS的局限，因为它是基于关系代数设计的：</p>

<ol>
  <li>
    <p>由于关系代数强调的是遵循范式和数据一致性，所以在性能上不是最优的。数据文件存放在磁盘上，而磁盘IO速度远低于内存速度，很多数据库的优化都不得不绕过范式，实现更快的性能。</p>
  </li>
  <li>
    <p>关系性建模要求一开始就把数据模型确定下来，随后的调整很费力。但随着迭代式开发模式的普及，数据结构需具灵活性、易于调整。而且有些数据不适合以关系模型去描述，比如key-value、文档数据库等。</p>
  </li>
  <li>
    <p>对于批量处理的应用，如数据仓库、数据挖掘和机器学习等，数据库事务控制会增加很大的开销，但又不是必须的。</p>
  </li>
</ol>

<p>而且，传统的RDMBS实际上是单机系统。虽然RDMBS也有集群版本，但所有的集群必须共享一个存储源(通常是磁盘阵列)。无论有再多的服务器，RMDBS只有一个日志系统、一个统一的事务控制。就好比一个人不能有两个脑袋。从CAP定理来看，RDBMS保证了一致性(Consistency)和可用性(Availability)，但因此必须牺牲分区容受性(Patition Tolerance)。)这致使RDMBS面对大数据时，就会捉襟见肘。</p>

<ol>
  <li>
    <p>数据量的局限
互联网应用的数据达到TB、PB级，不是单机可以存储的。即便通过数据分片，将数据物理地分散在多个存储设备上，也有存储设备本身的限制。而传统的磁盘阵列价格高昂。</p>
  </li>
  <li>
    <p>吞吐量的限制
无论数据如何分散到多个存储设备，整个数据库还是有中心控制机制。这必然造成锁、消息队列等关键资源的瓶颈，限制了并发性。换言之，传统的RDBMS是中心化的设计，和去中心化设计的思路是相反的。只有去中心化后，才能实现分区化。</p>
  </li>
  <li>
    <p>应用特点不同
互联网的应用不同于OLTP的特点。一次写入，多次读出；写后一般不会修改；数据以添加的方式写入。</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on the Books Big Data System]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/05/notes-on-the-books-big-data-system/"/>
    <updated>2015-05-05T14:02:04+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/05/notes-on-the-books-big-data-system</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color Space]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/04/color-space/"/>
    <updated>2015-04-28T11:07:51+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/04/color-space</id>
    <content type="html"><![CDATA[<p>Primary Color
	Color, Blue, and Yellow</p>

<p>Secondary Color
	Orange, Green and Violet </p>

<p>Tertiary Color
	Red-Orange, Yellow-Orange, Yellow-Green, Blue-Green, Blue-Violet and Red-Violet</p>

<p>Neutral Color: 不带色彩的颜色。白、黑、灰</p>

<p>Achromatic color 没有色彩。它们包含：白、黑和灰。中性色改变所有色彩的密度和值。</p>

<h3 id="scheme">Scheme</h3>

<h4 id="monochromatic-color-scheme">Monochromatic Color Scheme(单色主题)</h4>
<p>由任何颜色或中性色的色泽(tint), 色调(tone)和阴影的复合。</p>

<h4 id="analogous-color-scheme">Analogous Color Scheme(相似色主题)</h4>
<p>在色轮中，相互毗邻的3组颜色组成。</p>

<h4 id="extended-analogous-color-scheme">Extended Analogous Color Scheme(扩展的相似色主题)</h4>
<p>在色轮中，相互毗邻的4组颜色组成。</p>

<h4 id="complementary-color-scheme">Complementary Color Scheme(互补色主题)</h4>
<p>在色轮中，相对的两组颜色组成。</p>

<h4 id="split-complementary-color-scheme">Split Complementary Color Scheme(分离互补色主题)</h4>
<p>由一组颜色与它相对处毗邻的两组颜色组成。</p>

<h4 id="triadic-color-scheme">Triadic Color Scheme(三色系主题)</h4>
<p>由色轮中等距相隔的三组颜色组成。</p>

<h4 id="section">对比色</h4>

<h3 id="hsv">HSV</h3>

<ul>
  <li>Value(颜色值)：指一个颜色的相对亮度(brightness)或暗度。</li>
  <li>Saturation(or purity, 饱和度或纯度)：描述一个颜色有多纯。一个纯粹的颜色是干净而明亮的(clear and bright)，增加黑让它变模糊和暗(muddy and dark)，给它一个阴影。加白让颜色被冲洗(washed out)或着色(tinted)。</li>
</ul>

<h3 id="section-1">色温</h3>
<p>颜色可以分为两类：
* 暖色(aggressive, 前进色)：红、黄、棕
* 冷色(receding, 后退色)：绿、蓝、紫
* </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Features]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/04/understanding-features/"/>
    <updated>2015-04-27T16:10:06+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/04/understanding-features</id>
    <content type="html"><![CDATA[<h3 id="feature-detection">Feature Detection</h3>

<h3 id="feature-description">Feature Description</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to Computer Vision]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/04/an-introduction-to-computer-vision/"/>
    <updated>2015-04-10T17:58:15+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/04/an-introduction-to-computer-vision</id>
    <content type="html"><![CDATA[<p><a href="http://www.slideshare.net/alagala/computer-vision-with-android-google-gtug-bangkok-2011?qid=836f92da-83e3-478c-8ad5-63884666fa32&amp;v=qf1&amp;b=&amp;from_search=4">Computer Vision with Android (Google GTUG Bangkok 2011)</a></p>

<p>YCbCr, 类似于彩色电视广播所用的YUV色空间，到RGB转化。
人的视觉对亮度比对色相更敏感。</p>

<p>灰度图像能从YCbCr直接转化得到，不需进一步处理。</p>

<p>图像边缘探测 Image edge detection</p>

<p>形态学morphology</p>

<p>直方图分析</p>

<p>人脸识别的三种方法：</p>

<ul>
  <li>EigenFaces</li>
  <li>FisherFaces</li>
  <li>Local Binary Paths Histogram(LBPH)</li>
  <li></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLE Beacons iBeacons]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/04/ble-beacons-ibeacons/"/>
    <updated>2015-04-09T18:00:43+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/04/ble-beacons-ibeacons</id>
    <content type="html"><![CDATA[<p>BLE是低功耗蓝牙的意思：BlueTooth LE(low energy)。由于低功耗，电池寿命常。</p>

<h4 id="promixity-vs-location">Promixity vs Location</h4>

<p>定位是指物理位置。而Promixity是强调移动设备接近目标。</p>

<p>Beacon是近场定位。 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Creative Commons]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/04/about-creative-commons/"/>
    <updated>2015-04-08T16:33:00+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/04/about-creative-commons</id>
    <content type="html"><![CDATA[<p>参考slide share:</p>

<p><a href="http://www.slideshare.net/ramblinglibrarian/creative-commons-what-how-why">http://www.slideshare.net/ramblinglibrarian/creative-commons-what-how-why</a></p>

<p>一个creative commons license包含三个部分：</p>

<ul>
  <li>机器识别的</li>
  <li>人可读的</li>
  <li>法律条文</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[惊艳的WordPress主题]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/04/beautiful-wordpress-themes/"/>
    <updated>2015-04-01T17:00:43+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/04/beautiful-wordpress-themes</id>
    <content type="html"><![CDATA[<p>虽然我已搭建了本技术博客，以分享技术hacking方面的心得。不过，还准备再搭建灵性(Spirit)和艺术(Art)两个领域的博客。对于技术博客，外观要朴质简洁，以突出技术的真知灼见，不要让本质被形式所冲淡。但是，对于灵性和艺术博客，则需要精美的外观，给读者有美好的阅读体验，从而让洞见和高频振动触动读者的心。所以，尽管技术类博客用Octopress+github的方式构建，快速锋利，符合hacker的作风，已经足够。但是，后二者因对形式的要求，则准备用表现力更强的WordPress来搭建。这样，有丰富的主题可以去选择，而且也可自己学习主题的制作。</p>

<p>最近就在网上搜索WordPress主题，发现有很多不错，在这里分享给大家，也作为备忘。</p>

<h2 id="section">免费主题</h2>

<h3 id="dazzling">Dazzling</h3>

<p><a href="http://colorlib.com/dazzling/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-dazzling.png" alt="" /></a></p>

<p>支持响应式布局，特色图片作为标题显示很漂亮。</p>

<h3 id="sparkling">Sparkling</h3>

<p><a href="http://colorlib.com/sparkling/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-sparkling.png" alt="" /></a></p>

<p>支持响应式布局，字体凝重、有表现力。</p>

<h3 id="zerif-lite">Zerif Lite</h3>
<p><a href="https://wordpress.org/themes/zerif-lite/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-zerif-lite.png" alt="" /></a></p>

<p>简洁，轻量级。</p>

<h3 id="unite">Unite</h3>
<p><a href="http://colorlib.com/unite/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-unite.png" alt="" /></a></p>

<p>非常温馨纯洁的婚礼博客。</p>

<h3 id="hyperspace">Hyperspace</h3>
<p><a href="http://colorlib.com/unite/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-hyperspace.png" alt="" /></a></p>

<p>响应式，字体特别，选图生动、性感。</p>

<p>下载地址：<a href="http://ufothemes.com/themes/hyperspace/">http://ufothemes.com/themes/hyperspace/</a></p>

<h2 id="section-1">付费主题</h2>
<p>有些付费的主题并不一定比免费的好，所以要仔细比较。但是，的确有些主题物有所值，非常惊艳，美的让人窒息。</p>

<h3 id="kornio">Kornio</h3>
<p><a href="http://demo.centurythemes.com/kornio/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-kornio.png" alt="" /></a></p>

<p>这是个多用途的主题，可用于个人博客和商业网站等。配色很精美，响应式布局的效果很好，我分别在笔记本电脑、手机和iPad上分别测试了。细节考虑周到，比如向下翻页时，菜单栏总是悬浮在窗口顶部，同时Logo图标会变小，以节省空间给内容。这都比免费的主题更胜一筹。</p>

<p>在<a href="https://creativemarket.com/centurythemes/61651-Kornio-Multipurpose-WordPress-Theme">Creative Market</a>售价$35。</p>

<h3 id="harmonux">HarmonUX</h3>
<p><a href="http://netbiel.pl/harmonux/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-harmonux.png" alt="" /></a></p>

<p>响应式布局做的也不错，这种大图片块的设计很醒目，内容突出，有效率。用途没有前面的Kornio多，但是简洁直接。配色沉稳。</p>

<p>在<a href="https://creativemarket.com/centurythemes/61651-Kornio-Multipurpose-WordPress-Theme">Creative Market</a>售价$39。</p>

<h3 id="santorini">Santorini</h3>
<p><a href="http://www.cssigniter.com/preview/santorini/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-santorini.png" alt="" /></a></p>

<p>这是酒店类的主题。图片宏大，美的让人窒息。</p>

<p>Blog中图盘加白边和框线的效果很好看。
<a href="http://www.cssigniter.com/preview/santorini/five-tips-for-a-more-relaxing-vacation/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-santorini-blog.png" alt="" /></a></p>

<p>鼠标停靠时，图片加阴影，并显示博文标题的提示。细节考虑很贴心。
<a href="http://www.cssigniter.com/preview/santorini/five-tips-for-a-more-relaxing-vacation/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-santorini-blog-img-hover.png" alt="" /></a></p>

<p>在<a href="https://creativemarket.com/cssigniter/49870-Santorini-Resort-Hotel-theme">Creative Market</a>售价$39。</p>

<h3 id="katharine">Katharine</h3>
<p><a href="http://demos.lovelyconfetti.com/katharine/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-katharine.png" alt="" /></a></p>

<p>女性化主题，风格小清新，有点复古。</p>

<p>在<a href="https://creativemarket.com/crisa28/164482-Ecommerce-feminine-genesis-theme-Kat">Creative Market</a>售价$55。</p>

<p>相对于前面几个主题，感觉这个售价有些不值。</p>

<h3 id="alexander---a-interior-design-theme">Alexander - A Interior Design Theme</h3>

<p><a href="http://r6themes.com/alexander/"><img src="http://hack.the-lifematrix.net/images/wordpress-themes/wordpress-theme-alexander.png" alt="" /></a></p>

<p>这是内在设计的风格，聪明地利用空间，通过极简干净的设计，将空间尽可能留给内容。令人耳目一新。</p>

<p>在<a href="https://creativemarket.com/r6themes/44612-Alexander-A-Interior-Design-Theme">Creative Market</a>售价$45。</p>

<h3 id="novalumen">Novalumen</h3>

<p>https://creativemarket.com/TheGravity/54850-Novalumen-Modern-WordPress-Theme</p>

<p>http://thegravity.net/novalumen/</p>

<h2 id="wordpress">常见Wordpress主题网址</h2>

<ul>
  <li><a href="https://creativemarket.com/">https://creativemarket.com/</a></li>
  <li><a href="http://colorlib.com/wp/themes/">http://colorlib.com/wp/themes/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kaggle-2014-criteo]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2015/01/kaggle-2014-criteo/"/>
    <updated>2015-01-08T16:38:22+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2015/01/kaggle-2014-criteo</id>
    <content type="html"><![CDATA[<p>3idiots solution post, visit <a href="http://www.kaggle.com/c/criteo-display-ad-challenge/forums/t/10555/3-idiots-solution">here</a>
### Profile
train: 45m(45,840,618)</p>

<h3 id="count-feats">Count feats</h3>
<p>统计每个feats出现在样本中的频度：正样品、负样品、总和、正样本占比。
如下是26个频度最高(&gt;4m)的features。</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th style="text-align: left">Value</th>
      <th style="text-align: right">Neg</th>
      <th style="text-align: right">Pos</th>
      <th style="text-align: right">Total</th>
      <th style="text-align: right">Ratio</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>C14</td>
      <td style="text-align: left">1adce6ef</td>
      <td style="text-align: right">5251998</td>
      <td style="text-align: right">1823128</td>
      <td style="text-align: right">7075126</td>
      <td style="text-align: right">0.25768</td>
    </tr>
    <tr>
      <td>C5</td>
      <td style="text-align: left">4cf72387</td>
      <td style="text-align: right">5336129</td>
      <td style="text-align: right">1838585</td>
      <td style="text-align: right">7174714</td>
      <td style="text-align: right">0.25626</td>
    </tr>
    <tr>
      <td>C8</td>
      <td style="text-align: left">5b392875</td>
      <td style="text-align: right">5671997</td>
      <td style="text-align: right">1954651</td>
      <td style="text-align: right">7626648</td>
      <td style="text-align: right">0.25629</td>
    </tr>
    <tr>
      <td>C1</td>
      <td style="text-align: left">68fd1e64</td>
      <td style="text-align: right">5689813</td>
      <td style="text-align: right">1958501</td>
      <td style="text-align: right">7648314</td>
      <td style="text-align: right">0.25607</td>
    </tr>
    <tr>
      <td>C20</td>
      <td style="text-align: left">a458ea53</td>
      <td style="text-align: right">6433992</td>
      <td style="text-align: right">1997994</td>
      <td style="text-align: right">8431986</td>
      <td style="text-align: right">0.23695</td>
    </tr>
    <tr>
      <td>C6</td>
      <td style="text-align: left">fe6b92e5</td>
      <td style="text-align: right">6236932</td>
      <td style="text-align: right">2295003</td>
      <td style="text-align: right">8531935</td>
      <td style="text-align: right">0.26899</td>
    </tr>
    <tr>
      <td>C20</td>
      <td style="text-align: left">5840adea</td>
      <td style="text-align: right">6643317</td>
      <td style="text-align: right">1889587</td>
      <td style="text-align: right">8532904</td>
      <td style="text-align: right">0.22145</td>
    </tr>
    <tr>
      <td>C20</td>
      <td style="text-align: left">b1252a9d</td>
      <td style="text-align: right">6277109</td>
      <td style="text-align: right">2425760</td>
      <td style="text-align: right">8702869</td>
      <td style="text-align: right">0.27873</td>
    </tr>
    <tr>
      <td>C23</td>
      <td style="text-align: left">3a171ecb</td>
      <td style="text-align: right">7185150</td>
      <td style="text-align: right">2006084</td>
      <td style="text-align: right">9191234</td>
      <td style="text-align: right">0.21826</td>
    </tr>
    <tr>
      <td>C6</td>
      <td style="text-align: left">fbad5c96</td>
      <td style="text-align: right">7460404</td>
      <td style="text-align: right">2516292</td>
      <td style="text-align: right">9976696</td>
      <td style="text-align: right">0.25222</td>
    </tr>
    <tr>
      <td>C10</td>
      <td style="text-align: left">3b08e48b</td>
      <td style="text-align: right">7953527</td>
      <td style="text-align: right">2204236</td>
      <td style="text-align: right">10157763</td>
      <td style="text-align: right">0.217</td>
    </tr>
    <tr>
      <td>C14</td>
      <td style="text-align: left">07d13a8f</td>
      <td style="text-align: right">11378971</td>
      <td style="text-align: right">4341777</td>
      <td style="text-align: right">15720748</td>
      <td style="text-align: right">0.27618</td>
    </tr>
    <tr>
      <td>C19</td>
      <td style="text-align: left">21ddcdc9</td>
      <td style="text-align: right">12155179</td>
      <td style="text-align: right">3645176</td>
      <td style="text-align: right">15800355</td>
      <td style="text-align: right">0.2307</td>
    </tr>
    <tr>
      <td>C14</td>
      <td style="text-align: left">b28479f6</td>
      <td style="text-align: right">12523741</td>
      <td style="text-align: right">3505314</td>
      <td style="text-align: right">16029055</td>
      <td style="text-align: right">0.21869</td>
    </tr>
    <tr>
      <td>C6</td>
      <td style="text-align: left">7e0ccccf</td>
      <td style="text-align: right">13648629</td>
      <td style="text-align: right">4518321</td>
      <td style="text-align: right">18166950</td>
      <td style="text-align: right">0.24871</td>
    </tr>
    <tr>
      <td>C23</td>
      <td style="text-align: left">32c7478e</td>
      <td style="text-align: right">14705791</td>
      <td style="text-align: right">5464777</td>
      <td style="text-align: right">20170568</td>
      <td style="text-align: right">0.27093</td>
    </tr>
    <tr>
      <td>C19</td>
      <td style="text-align: left"> </td>
      <td style="text-align: right">14740761</td>
      <td style="text-align: right">5432097</td>
      <td style="text-align: right">20172858</td>
      <td style="text-align: right">0.26928</td>
    </tr>
    <tr>
      <td>C20</td>
      <td style="text-align: left"> </td>
      <td style="text-align: right">14740761</td>
      <td style="text-align: right">5432097</td>
      <td style="text-align: right">20172858</td>
      <td style="text-align: right">0.26928</td>
    </tr>
    <tr>
      <td>C26</td>
      <td style="text-align: left"> </td>
      <td style="text-align: right">14740761</td>
      <td style="text-align: right">5432097</td>
      <td style="text-align: right">20172858</td>
      <td style="text-align: right">0.26928</td>
    </tr>
    <tr>
      <td>C25</td>
      <td style="text-align: left"> </td>
      <td style="text-align: right">14740761</td>
      <td style="text-align: right">5432097</td>
      <td style="text-align: right">20172858</td>
      <td style="text-align: right">0.26928</td>
    </tr>
    <tr>
      <td>C17</td>
      <td style="text-align: left">e5ba7672</td>
      <td style="text-align: right">14618074</td>
      <td style="text-align: right">6535485</td>
      <td style="text-align: right">21153559</td>
      <td style="text-align: right">0.30895</td>
    </tr>
    <tr>
      <td>C1</td>
      <td style="text-align: left">05db9164</td>
      <td style="text-align: right">17068183</td>
      <td style="text-align: right">5882677</td>
      <td style="text-align: right">22950860</td>
      <td style="text-align: right">0.25632</td>
    </tr>
    <tr>
      <td>C8</td>
      <td style="text-align: left">0b153874</td>
      <td style="text-align: right">20252230</td>
      <td style="text-align: right">6979966</td>
      <td style="text-align: right">27232196</td>
      <td style="text-align: right">0.25631</td>
    </tr>
    <tr>
      <td>C5</td>
      <td style="text-align: left">25c83c98</td>
      <td style="text-align: right">22888073</td>
      <td style="text-align: right">7884064</td>
      <td style="text-align: right">30772137</td>
      <td style="text-align: right">0.25621</td>
    </tr>
    <tr>
      <td>C22</td>
      <td style="text-align: left"> </td>
      <td style="text-align: right">26268267</td>
      <td style="text-align: right">8686806</td>
      <td style="text-align: right">34955073</td>
      <td style="text-align: right">0.24851</td>
    </tr>
    <tr>
      <td>C9</td>
      <td style="text-align: left">a73ee510</td>
      <td style="text-align: right">30037927</td>
      <td style="text-align: right">11162225</td>
      <td style="text-align: right">41200152</td>
      <td style="text-align: right">0.27093</td>
    </tr>
  </tbody>
</table>

<h3 id="pre-a">Pre-A</h3>

<p>39个feats的数据集，分为：
Dense features: 1~13 数字型特征。(每个实例都有)
Sparse features: 26个最高频度的feats。</p>

<p>非零的features: 13~39个之间。</p>

<p>经过GBDT求解，生成30棵深度为7的树。则feats数为30*2^7。每个实例有30个非零feats。</p>

<h3 id="pre-b">Pre-B</h3>
<p>两个来源：csv, gbdt</p>

<p>csv:
   数值feats离散化: Ix-value (x=1…13)
       value&gt;2: [log(v)]^2取整
       value&lt;2: ‘SP’+value
   类别feat直接利用：Cx-value (x=1…26)
		 对于小于10的feats, feats = Cx-less </p>

<p>gbdt:
   (field, i:feat)</p>

<p>通过前缀，保证每个feats的唯一性。再加上field，做到field-aware
组合： 生成feats对 (field, feat)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Lisp Evaluation Rule]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/12/the-lisp-evaluation-rule/"/>
    <updated>2014-12-26T14:55:44+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/12/the-lisp-evaluation-rule</id>
    <content type="html"><![CDATA[<p><em>摘自”Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp”, Section 1.9</em></p>

<ul>
  <li>
    <p>Every expression is either a list or an atom.
<br />
每一个表达式都是列表或原子。</p>
  </li>
  <li>
    <p>Every list to be evaluated is either a special form expression or a function application. 
<br />
每个被求值的列表都是特殊的form表达式或函数应用。</p>
  </li>
  <li>
    <p>A special form expression is defined to be a list whose first element is a special form operator. The expression is evaluated according to the operator’s idiosyncratic evaluation rule.
<br />
一个特殊形式的表达式被定义为一个列表，其第一个元素是一个特殊的form运算符。根据运算符的特殊求值规则，对表达式求值。</p>
  </li>
  <li>
    <p>A function application is evaluated by first evaluating the arguments (the rest of the list) and then finding the function named by the first element of the list and applying it to the list of evaluated arguments.
 <br />
 对函数应用求值时，首先对参数(列表的剩余部分)求值，然后找到由列表第一个元素命名的函数，然后将此函数应用到已求值的参数上。</p>
  </li>
  <li>
    <p>Every atom is either a symbol or a nonsymbol.
<br />
每个原子都是符号或者非符号。</p>
  </li>
  <li>
    <p>A symbol evaluates to the most recent value that has been assigned to the variable named by that symbol. Symbols are composed of letters, and possibly digits and, rarely, punctuation characters.
<br />
对一个符号的求值，是由它命名的变量最近所赋的值。符号由字母组成，可能有数字，很少有标点符号。
<br />
<em>(注：这说明符号和变量不同，变量是内存中的对象，而符号是对变量的命名。多个符号可能对应同一个变量。)</em></p>
  </li>
  <li>
    <p>A nonsymbol atom evaluates to itself. 
&lt;/br&gt;
非符号的原子求值为自己。比如，数字和字符串，都是非符号原子型的，其值等于自己。</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overview of AMPL]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/12/ampl/"/>
    <updated>2014-12-01T10:55:41+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/12/ampl</id>
    <content type="html"><![CDATA[<h1 id="ampl">AMPL</h1>

<p>AMPL(A Mathematical Programming Language)是描述数学规划的高层次语言。它允许<strong>模型与数据分离</strong>, 可以独立于数据而单独指定模型。这样，建模者就可花更多的时间去改进模型，而不必在数据整理和问题求解上花太多时间。这也是促进更有效的分工合作。</p>

<p><img src="http://hack.the-lifematrix.net/images/AMPL/AMPL_Overview.png" alt="" /></p>

<p>AMPL的简介： [AMPL (A Mathematical Programming Language) at the University of Michigan Documentation]
(http://www-personal.engin.umich.edu/~murty/510/ampl.pdf)</p>

<h2 id="section">商业化情况</h2>

<p>http://www.ampl.com</p>

<h4 id="section-1">商业求解器</h4>

<ul>
  <li><a href="http://ampl.com/products/solvers/solvers-we-sell/cplex/">CPLEX</a> (IBM)</li>
  <li><a href="http://ampl.com/products/solvers/solvers-we-sell/gurobi/">Gurobi</a> (Gurobi Optimiaztion)</li>
  <li><a href="http://ampl.com/products/solvers/solvers-we-sell/xpress/">Xpress</a> (FICO)</li>
</ul>

<h2 id="section-2">自由软件</h2>

<h3 id="glpk">GLPK</h3>
<p><a href="https://www.gnu.org/software/glpk/">GLPK(GNU Linear Programming Kit)</a>是GNU旗下的项目，用于求解大规模线性规划、混合整数规划和其它相关问题。它由一组用ANSI C写成的例程构成，以库文件形式提供。</p>

<p>GLPK支持<em>GNU MathProg建模语言</em>，它是AMPL语言的子集。</p>

<h3 id="mathprog">MathProg</h3>

<ul>
  <li><a href="https://www3.nd.edu/~jeff/mathprog/glpk-4.47/doc/gmpl.pdf">Language Refrence</a></li>
  <li>
    <h2 id="section-3">在线求解器</h2>
  </li>
  <li>NEOS Server: State-of-the-Art Solvers for Numerical Optimization
http://www.neos-server.org/neos/</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[译文：扁平化设计的原理]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/11/the-principles-of-flat-design/"/>
    <updated>2014-11-19T10:28:07+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/11/the-principles-of-flat-design</id>
    <content type="html"><![CDATA[<p><em>原文地址：<a href="http://designmodo.com/flat-design-principles/">http://designmodo.com/flat-design-principles/</a></em></p>

<p><a href="http://designmodo.com/flat-design/">扁平化设计</a> – 设计社区简直没有停止讨论。</p>

<p>感觉很强烈。大多数设计者，要么没有充分掌握它，要么绝对地厌恶它。</p>

<p>我是站在中间的某处。好的设计是关乎创造一些有用的东西，能奏效。如果答案是以扁平化的时尚去设计，那就这么做。但是，趋势可能不是对所有项目奏效，因此不能强制。</p>

<p>因此，让我们检视一下是什么让东西扁平化。这里有<strong>5个相当明显的特征</strong>。先逐个看看，然后对<strong>“近乎”扁平化设计</strong>做些介绍。</p>

<h3 id="no-added-effects-">No Added Effects 没有附加的效果</h3>

<p><a href="http://www.triplagent.com/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/TriplAgent.jpg" alt="TriplAgent" /></a></p>

<p><a href="http://www.intothearctic.gp/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/intothearctic.jpg" alt="intothearctic" /></a></p>

<p><a href="http://dribbble.com/shots/947749-Task-app"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Task-app.jpg" alt="Task-app" /></a></p>

<p><strong>扁平化设计</strong>得名于所使用的形状。扁平化设计使用了一个明显的二维风格，它纯粹就是扁平的。</p>

<p>这个概念的实现不带装饰 - 去掉阴影、斜面边缘(bevel)、压纹(embossing)、梯度和其它增加深度的工具。每个元素或盒子，从图像框(image frame)到按钮、到导航工具，是干净挺括的，少了羽化边缘或阴影。</p>

<p>没有添加什么让元素看着更真实，比如在<a href="http://designmodo.com/skeuomorphism-ui-design/">拟物风格设计(skeuomorphic design)</a>的项目中让元素看着象3D的设计技巧。扁平化设计中使用的层，借鉴了其它项目，但是层没有交叉，剩下一个明显的背景图片、前端图片或按钮、文本和导航。</p>

<p>那么它如何奏效？去掉所有附加物，扁平化设计有一个独特的外观和感觉。这依赖于设计上清晰的层次感和元素的放置，从而使得成功的项目易于让用户去理解和交互。虽然越来越多的网站正在使用扁平化设计原理，但是对app和移动设计，它可能甚至更受欢迎。由于较小的屏幕，会有更少的按钮和选项，让一个扁平化界面相当易于使用。</p>

<h3 id="simple-elements-">Simple Elements 简单元素</h3>
<p><a href="http://dribbble.com/shots/917819-iPad-Calendar-Login"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/iPad-Calendar-Login.jpg" alt="iPad-Calendar-Login" /></a></p>

<p><a href="http://dribbble.com/shots/962125-Filetypes"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Filetypes.jpg" alt="Filetypes" /></a></p>

<p><a href="http://designmodo.com/square/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/square-ui.jpg" alt="square-ui" /></a></p>

<p><a href="http://simonemarcarino.com/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Simone-Marcarino.jpg" alt="Simone-Marcarino" /></a></p>

<p>扁平化设计使用很多简单的用户界面元素，比如按钮、图标。设计者经常坚守简单的形状，比如矩形、圆或正方形，并让每个形状突出。形状的边缘可以是完全的尖角、正方形或包含弯度。</p>

<p>每个界面元素必须简单并易于点击或轻拍。交互必须对用户是直觉式的，不需很多设计内的解释。</p>

<p>除过简单的风格，在可点击的按钮上加黑体和颜色，来促进使用。但是<strong>不要将简单元素与简单设计混淆</strong>，扁平化设计概念能恰恰象其它任何设计方案一样复杂。</p>

<p>起步时需要帮助吗？Designmodo提供很多采用扁平化风格的UI工具 - 从<a href="http://designmodo.com/square-free/">Square UI Free</a>到<a href="http://designmodo.com/flat-free/">Flat UI Free</a>, 一个带有基本组件的简单PSD/HTML UI kit; 以及从 <a href="http://designmodo.com/square/">Square UI</a>到<a href="http://designmodo.com/flat/">Flat UI Pro</a>，针对网站和APP设计项目的完整PSD/HTML UI包。</p>

<h3 id="focus-on-typography-">Focus on Typography 聚焦于版式</h3>
<p><a href="http://courtneyandrew.com/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/courtneyandrew.jpg" alt="courtneyandrew" /></a></p>

<p><a href="https://plover.co/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Plover.jpg" alt="Plover" /></a></p>

<p><a href="http://www.flatmate.se/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Flatmate.jpg" alt="Plover" /></a></p>

<p>因为扁平化设计中元素的简单性，版式就极端重要。</p>

<p>字体的格调必须与整个设计方案匹配 - 一个高度修饰的字体在超级简单的设计上，可能看起来有些奇怪。字体必须醒目，措辞也须简单而有效，从某种程度上让最终的产品在视觉上和文字上都有一致的格调。</p>

<p>考虑一个简单的无衬线字体族，带有丰富的变体和字重，用于扁平化设计网站的主要版式。用一种新的字体作为一个艺术元素，来增加意想不到的润色，但要仔细，别走过头使用了特殊的字体。</p>

<p>字体也必须告诉用户如何使用这个设计。标签按钮和其它元素能增加易用性和交互性。</p>

<h3 id="focus-on-color-">Focus on Color 聚焦于颜色</h3>
<p><a href="http://dribbble.com/shots/968439-Close-landing-page"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Close-landing-page.jpg" alt="Close-landing-page" /></a></p>

<p><a href="http://dribbble.com/shots/963964-Online-Radio"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Online-Radio.jpg" alt="Online-Radio" /></a></p>

<p><a href="http://dribbble.com/shots/1021883-Squirrel-Settings"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Squirrel-Settings.jpg" alt="Squirrel-Settings" /></a></p>

<p>颜色占扁平化设计的很大部分。<a href="http://designmodo.com/flat-design-colors/">扁平化设计调色板</a> 经常比其它网站要明亮和鲜艳的多。</p>

<p>扁平化设计项目的调色板也经常包括更多的色调。虽然大多数调色板至多聚焦在2到3个颜色，但扁平化设计调色板可能均等使用6~8种颜色。</p>

<p>色调往往有活力(vibrant) – 想想颜色轮(the color wheel)上最纯粹的颜色 – 没有染色(tint)或格调(tone)。主要和其次的颜色都受欢迎。而且，也频繁使用特定类型的颜色；在扁平化设计趋势的这波周期中，怀旧色(retro color)， 包括鲜肉色(salmon)、紫色(purple)、绿色和蓝色，特别流行。</p>

<h3 id="minimalist-approach-">Minimalist Approach 极简策略</h3>
<p><a href="http://dribbble.com/shots/981593-Personal-Site"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Personal-Site.jpg" alt="Close-landing-page" /></a></p>

<p><a href="http://fltdsgn.com/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Dropbox.jpg" alt="Dropbox" /></a></p>

<p><a href="http://ournameismud.co.uk/"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Mud.jpg" alt="Mud" /></a></p>

<p>扁平化设计本质上就简单，因此能与整个极简设计策略很好地工作。</p>

<p>在整个网站设计上避免过多浮华的装饰。简单的颜色和文本可能就够了。如果你想增加视觉材料(visuals)，就选择简单的照片。</p>

<p>一些使用扁平化设计的零售网站，比如Svpply，做了很棒的工作，将物品放置在简单的背景上。(必须指出，相片的确有一些自然的深度，但是仍然与设计的整体扁平化吻合。）</p>

<h3 id="almost-flat-design-">“Almost” Flat Design 近乎扁平化设计</h3>
<p><a href="http://hack.the-lifematrix.net/images/flat-design-principles/Nagging-popup.jpg">![Nagging-popup]</a>](http://dribbble.com/shots/1024811-Nagging-popup)</p>

<p><a href="http://dribbble.com/shots/1054539-Calc"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Calc.jpg" alt="Calc" /></a></p>

<p><a href="http://dribbble.com/shots/992907-SimpleMail-Full-View-The-easy-way-to-email-anything"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/SimpleMail.jpg" alt="SimpleMail" /></a></p>

<p><a href="http://dribbble.com/shots/1053618-Coming-project"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Coming-project.jpg" alt="Coming-project" /></a></p>

<p><a href="http://dribbble.com/shots/1001719-Music-Web-Application"><img src="http://hack.the-lifematrix.net/images/flat-design-principles/Music-Web-Application.jpg" alt="Music-Web-Application" /></a></p>

<p>更多设计者常常赞同的一个风格是“近乎”扁平化设计。</p>

<p>在近乎扁平化设计中，扁平风格的基本方案被使用，但是会在设计方案中增加一些效果。例如，按钮，可能包含轻微的梯度或去掉阴影。设计者通常选择一个效果，然后在一个近乎扁平化项目项目中专门地使用。</p>

<p>比起扁平化设计背后“无效果”想法的一些僵硬性，这个风格允许多一点灵活性。</p>

<p>设计者喜欢它，因为添加了深度和纹理。用户喜欢它，因为风格没那么锐利，有助于指导合适的迭代。另一方面，设计者不喜欢它，因为它以缺少一种真正风格定义的方式，去联姻了两种风格。</p>

<h3 id="more-on-flat-design-">More on Flat Design 更多关于扁平化设计</h3>
<p>Designmodo 已经是扁平化设计趋势讨论的引领者。阅读我们过去的文章，了解更多关于扁平化设计。</p>

<ul>
  <li><a href="http://designmodo.com/flat-design">Flat Design: Can you Benefit from the Trend?</a></li>
  <li><a href="http://designmodo.com/flat-design-examples/">Flat Web Design: Beautiful Examples of Websites</a></li>
  <li><a href="http://designmodo.com/flat-icons-examples/">Beautiful Examples of Flat Icon Design</a></li>
  <li><a href="http://designmodo.com/flat-design-colors/">Making it Work: Flat Design and Color Trends</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[译文：扁平化设计：趋势或者革命？]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/11/flat-web-design-trend-or-revolution/"/>
    <updated>2014-11-09T15:15:44+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/11/flat-web-design-trend-or-revolution</id>
    <content type="html"><![CDATA[<p><em>原文地址: <a href="http://blog.usabilla.com/flat-web-design-trend-or-revolution/">http://blog.usabilla.com/flat-web-design-trend-or-revolution/</a></em></p>

<p>有时，新的做事方法潜入我们的生活或工作习惯。其原因，可能是不断变化的个人偏好、新技术，或跟随潮流的简单冲动。Web设计上一个新近的趋势是扁平化设计。扁平化针对二维的屏幕，描画二维的设计(Flat describes a two dimensional design for a two dimensional screen)。</p>

<p>在最近几年，拟物风格(skeuomorphism)的特点是现代和以用户为中心的设计。现在，看起来我们已经有些习惯于数字时代；我们很多人甚至不记得，在设计中所试图展现的东西在现实生活中的对应物。</p>

<p>通过扁平化设计，我们向接受web独特而抽象的属性迈进一步。但是，我们是在应付一个临时的趋势，或者正在面对我们如何为web设计的一次革命？这里有5个原因，为什么扁平化web设计可能是一个好的习惯。</p>

<h1 id="web">1. 扁平化web设计是诚实的</h1>
<p><img src="http://hack.the-lifematrix.net/images/flat-web-design-trend-or-revolution/Screen-shot-2013-04-04-at-11.29.jpg" alt="" />
<em><a href="http://www.windowsphone.com/en-us">Windows phone</a>网站用大量的颜色、排版和清晰的结构，展示了扁平化Windows设计。</em></p>

<p>大概扁平化设计的核心概念是<strong>“诚实”</strong>。你想知道这意味着什么？很简单：扁平化设计承认屏幕设计的二维属性(Flat design acknowledges the two dimensional nature of screen design)。不试图去添加任何三维的效果，或者诱使用户认为他们在和一个并非扁平屏幕的东西交互。</p>

<p>这里没有阴影、没有梯度、没有模式、没有3-D效果，或没有代表真实世界事物的设计元素(design elements representing real-world things)。相反，扁平化设计使用颜色、排版、很多留白(a lot of white space)和严格的网格系统来实现一个清晰、可用的界面。</p>

<h1 id="web-1">2. 扁平化Web设计引领潮流</h1>
<p><img src="http://hack.the-lifematrix.net/images/flat-web-design-trend-or-revolution/Screen-shot-2013-04-04-at-11.26.jpg" alt="" />
<em><a href="http://www.rdio.com/">Rdio</a>采用了带有很多色彩和大量留白的扁平化设计</em></p>

<p>有些习惯来自于时尚。我们想跟上时代，这就是为什么我们跟随潮流。扁平化设计引领潮流 – 它新鲜、清晰、明亮和现代。它与web设计的其它潮流相伴而来(it goes hand in hand with other trends in web design)，比如排版和留白的使用。而且，亮色(bright colors)也找到了它们的路，回到了现代设计者的意识中。</p>

<p>正如任何其他趋势，我们不知道扁平化设计会持续多久。它可能是一个时期(phase)，但它也可能只触发web设计领域很小的革新。只要我们不知道它将是什么，就不要试图盲目跟随潮流。在将你的设计扁平化之前，确信你的目标对象(target group)准备好了，而且你的网站适合这种策略。</p>

<h1 id="section">3. 扁平化设计具备可用性</h1>

<p><img src="http://hack.the-lifematrix.net/images/flat-web-design-trend-or-revolution/Screen-shot-2013-04-04-at-11.30.jpg" alt="" />
<em><a href="http://foundation.zurb.com/index.php">Foundation</a>将所有设计元素消减到合理的最小程度。每个设计元素都对网站的可用性做出贡献。</em></p>

<p>扁平化设计不但吸引人，而且具备可用性 — 如果做得恰当，这是显然的(if done right, obviously)。扁平化设计是简单并消减到最小程度。其创意是，移除所有让人分心的元素，真正关注在内容和你用户的目标上。使用可视化的暗示，比如颜色、排版来引导你的用户，帮助他们达到他们的目标。</p>

<p>避免分心，并不是把扁平化设计等同于最小化设计。这就是它变得微妙的地方。脱光你的设计，让它尽可能简单清晰 - 但是确保你没有移除对用户成功使用网站必不可少的暗示。</p>

<h1 id="section-1">4. 扁平化设计很快捷</h1>

<p><img src="http://hack.the-lifematrix.net/images/flat-web-design-trend-or-revolution/Screen-shot-2013-04-04-at-11.25.jpg" alt="" />
<em><a href="http://www.geckoboard.com/plans-and-pricing/">Geckoboard</a> 的扁平和精简设计很有说服力。在只看了页面一眼之后，他们的定价就一目了然。</em></p>

<p>扁平化设计显露了效率(Flat web design radiates efficiency)。因为不用分心，你的视线直接被吸引到网站最本质的地方。你不但能达到目标，而且你能确信你能在很短的时间内做到。虽然一个不同的网站也能做到可用性，但是扁平化设计不会耻于炫耀(a flat design is not ashamed to brag about it)。</p>

<p>在这个情形下，炫耀并非坏事。如果你能说服你的访问者，他们将发现他们要找的 - 甚至在他们开始看之前 - 在更好的转换率方面，你已经移除了很大的障碍(you have taken a huge hurdle in terms of a better conversion)。</p>

<h1 id="section-2">5. 扁平化网站设计能扩展</h1>

<p><img src="http://hack.the-lifematrix.net/images/flat-web-design-trend-or-revolution/Screen-shot-2013-04-04-at-11.24.jpg" alt="" />
<em><a href="http://oak.is/">Oak</a> 采用了带有大量排版、留白和色彩的扁平化设计。网站是可响应的，内容很容易在不同屏幕尺寸扩展。</em></p>

<p>最后一点并非最不重要(Last but not least)，扁平化设计易于扩展。这点和web设计中最近的另一个趋势：响应性设计(responsive design），是一致的。移动互联网正变得越来越重要，你必须考虑你的网站在不同的屏幕尺寸上看着象会怎样。虽然实际的图像和其它设计效果难以扩展，但是扁平化设计元素，比如颜色和排版，很容易适应更小的屏幕。</p>

<p>例如，在扁平化设计中，有颜色的链接，将取代仔细风格化的按钮(instead of having a carefully styled button, in flat web design a colored link will do)。一个模式化的背景图像变成一个朴素的背景颜色(a plain background color)。而且，通过使用不同的颜色，不同的内容区域在横跨多个设备时，可以容易地识别。</p>

<h1 id="section-3">6. 趋势或革命？</h1>

<p>你怎么思考扁平化设计？这是有些要认真对待的东西吗？你看到了伴随这一极简设计策略而来的好处吗？或者你反对，认为这只是一个我们不必过于兴奋的趋势？请给出你的评论(Let us know in the comments)。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flat Design Resources]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/11/flat-design-resources/"/>
    <updated>2014-11-05T19:06:53+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/11/flat-design-resources</id>
    <content type="html"><![CDATA[<p><a href="http://www.hongkiat.com/blog/flat-design-resources/">http://www.hongkiat.com/blog/flat-design-resources/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile: Native Application vs Web Solution]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/11/mobile-native-app-vs-web-app/"/>
    <updated>2014-11-05T15:31:40+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/11/mobile-native-app-vs-web-app</id>
    <content type="html"><![CDATA[<p>移动互联网近几年发展迅速，毋庸置疑，也会成为今后的主流趋势。相应地，针对移动端（手机、平板电脑…）的应用也越来越成为热门。移动端应用开发有两个思路，本地应用(native application)和Web解决方案(web solution)。关于这两者之间的优劣和前景一直争论不休。我赞同<a href="http://www.abookapart.com/products/mobile-first">移动优先 (Mobile First)</a>作者的观点：<strong>事实上，有很大理由，两者都需要考虑</strong>。下面就书中和相关文章的观点做总结介绍。</p>

<h2 id="section">本地应用</h2>

<h4 id="section-1">用户体验更好</h4>
<p>因为本地应用运行在本地，它们能访问web应用无法访问到系统资源。这意味着，在本地应用中，画面过渡和交互通常都会更平滑。试图在浏览器中重现这些效果，会导致用户体验上明显的停顿和延迟。</p>

<h4 id="section-2">便于访问本地硬件</h4>
<p>本地应用可以更健壮地访问硬件设施，这在目前还无法通过移动web浏览器做到。
* 关键的特性，如访问地址簿、SMS(短消息)、相机、声音输入(audio input)和内置的传感器，大多数都做不到。
* 无法实现在后台运行进程
* 无法通过移动端的App Store去变现(monetize)或app内的购买(in-app purchase)
* 非本地应用无法加入App Store，因此难以出现在用户的移动设备屏幕上，这将不利于它被发现和持续地使用</p>

<p><br />
<em>所以，如果你的移动产品或业务需要很深的硬件访问、后台进程，app或in-app销售，或对移动设备更多集成的安排，那你可能需要一个本地解决方案。但这不并意味着，</em> <strong><em>你不需要一个移动web解决方案。</em></strong></p>

<h2 id="web">Web解决方案</h2>

<h4 id="access-">Access 可访问性</h4>
<p>正如移动策略专家Jason Grigspy所说，<em>”Web链接不打开应用程序，而是指向网页(Web links don’t open apps, they go to web pages)“</em>。 无论是通过搜索、邮件、社交网络或Web页面，如果你有在线的内容，人们将发现和分享到它的链接。缺少移动web解决方案意味着，任何在移动设备上点击链接的人，将没有一个很棒的体验。本地移动应用对此爱莫能助。</p>

<p>对于移动web体验，访问性甚至是最大的用户利益所在。即使你针对一个平台开发了本地应用，风险你不能针对每个平台做一个。Apple的iOS要求Objective C；Google的安卓要求Java；微软的Windows Phone 7依赖于silverlight；三星的Bada要求C++；RIM的黑莓，有Java, WebWorks和Adode Air解决方案。很少有公司能用所有这些技术构建些什么。而且，即便你能针对每个平台开发一个本地应用，维护它们的成本很快就令人望而却步。</p>

<p>无论如何，增加web将可能是你最流行的移动体验。14%的Twitter会员使用移动web体验，想对比，8%使用本地iPhone应用，7%使用黑莓本地应用。剩下的本地移动应用，每个都少于5%的用户基数(<a href="https://blog.twitter.com/2010/evolving-ecosystem">资料来源</a>)。</p>

<p><a href="https://blog.twitter.com/2010/evolving-ecosystem"><img src="http://hack.the-lifematrix.net/images/top_10_twitter_apps_by_unique_users.png" alt="" /></a></p>

<p>Facebook情况类似，接近19%的帖子在移动web体验上完成，而Facebook本地的iPhone、安卓、黑莓应用每个只占了大约4%(<a href="http://danzarrella.com/new-data-on-mobile-facebook-posting.html#">资料来源</a>)。这说明访问性(任何地点)很重要(It turns out access (anywhere) goes a long way)。</p>

<p><a href="http://danzarrella.com/new-data-on-mobile-facebook-posting.html#"><img src="http://hack.the-lifematrix.net/images/Mobile_Facebook_posting_clients.jpg" alt="" /></a></p>

<h4 id="web-1">本地应用促进web使用</h4>
<p>事实上，本地应用其实增加了移动设备上的web使用。每次在本地应用中分享和引用的链接，它就会在web的浏览器窗口打开。因此，更多的本地访问很快转化为更多的web使用。</p>

<h4 id="section-3">便于更新、测试</h4>
<p>移动web体验也不需要用户下载更新(对一个服务器的修正，就是对站点的修正)，这让你能经常地做多种设计选项的A/B测试或分桶测试(Bucket test)。<strong><em>如果这二者任何一个对你都至关重要，那么移动web应用会更有意义。</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Design的趋势]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/10/web-design-trends-and-valuable-sites/"/>
    <updated>2014-10-30T14:55:26+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/10/web-design-trends-and-valuable-sites</id>
    <content type="html"><![CDATA[<p>虽然我的注意力主要在机器学习和服务端架构，但前端领域也在蓬勃地发展着，有很多激动人心的创意、新技术、富于洞见的设计理念和极致的美学体验。最近在网上发现一些有价值的文章，分享给大家。</p>

<p><em><a href="http://www.hongkiat.com/blog/web-design-trends-2014/">Web Design: 20 Hottest Trends To Watch Out For In 2014</a></em> 是一篇很棒的文章，总结了本年度(2014)年在Web Design方面可去观察的20个热点。作者自身的设计水平就很高，了解业界的动态和趋势，掌握资料翔实。如下为译文，英文好的请直接阅读<a href="http://www.hongkiat.com/blog/web-design-trends-2014/">原文</a>。</p>

<h2 id="web-design-20-hottest-trends-to-watch-out-for-in-2014">译文：Web Design: 20 Hottest Trends To Watch Out For In 2014</h2>

<p>花几小时在线浏览不同网站后，你往往会找到一些设计上可辨识的趋势。过去几年，作者 <strong><em>(译者注：译文中的作者，指原文作者，下同)</em></strong> 一直在撰写关于变化趋势的文章，特别是在web站点布局和web应用领域。W3C规范的发展连同现代浏览器，已经打开了通往<strong>数字设计新时代(a new era of digital design)</strong>的大门。</p>

<p>在本文，作者将分享20个成长中的趋势，希望看到它在2014年蓬勃发展。许多已经开始，有些才刚现曙光。检视新的趋势、看看<a href="http://www.hongkiat.com/blog/web-design-trend-2013/">它们能持续多久(how long they stick around)</a>，挺好玩的。在2014年浏览网站时，请密切关注任何正在发生的这些UI/UX <em>(译者注：User Interface/User Experience)</em> 的趋势(keep your eyes peeled for any of these UI/UX trends in action)。</p>

<p>推荐阅读：<a href="http://www.hongkiat.com/blog/40-web-design-conferences-to-look-forward-to-in-2014/">40 Web Design Conferences To Look Forward To In 2014</a></p>

<h3 id="grid-style-layouts-">1. Grid-Style Layouts 网格式布局</h3>
<p>对网格设计的主流认识来自<a href="https://www.pinterest.com">pinterest</a>。社交网站的news feed过去常用流线型，比如twitter和Tumblr。现在象Facebook的许多页面将时间线更新散布为网格式。</p>

<p>这并非说要强制老的网站这么做，而是要看目的是什么。<strong>用户体验</strong>总是首先被考虑的。在使用微缩图或文字更新的场合下，网格布局能将所有内容压缩到一个易于阅读的格式，让用户可以快速浏览。同时，页面内容可以保持一致且不占太多空间。</p>

<p>诸如开源js库<a href="http://masonry.desandro.com">masonry</a>，可以帮你做大量繁重的工作。</p>

<p>没有太多的网站利用这一特性，但凡使用的，经常让视觉很舒服。</p>

<p><a href="http://masonry.desandro.com"><img src="http://hack.the-lifematrix.net/images/01-masonry-jquery-homepage.jpg" alt="Masonry web site" /></a></p>

<h3 id="crafty-image-captions-">2. Crafty Image Captions 巧妙的图片标题</h3>
<p>许多网站用图片画廊来展示商品的概要、相片、微缩图等。此文讲到了独特的<a href="http://www.hongkiat.com/blog/css3-image-captions/">CSS3图片效果</a>，其演示效果见<a href="http://demo.hongkiat.com/css3-image-captions/index.html">此页面</a>。使用图片标题(Image Caption)帮助网页访问者将更多信息与图片联系起来。而且，利用CSS3，你可以只历来浏览器自带的特性，而不需特别的javascript效果。</p>

<p><strong>每个网站都应该使用自己的设计，来为读者提供便利（Each website should have its own design to provide benefit to the reader）</strong>。还有一个来自Codrops的教程关于<a href="http://tympanus.net/codrops/2013/05/02/automatic-figure-numbering-with-css-counters/">figure numbering with CSS3</a>。你可以构造标题风格的标签，自动添加到每页的图片 (或<a href="http://html5doctor.com/the-figure-figcaption-elements/">图形</a>) 上。</p>

<h3 id="extended-form-elements-">3. Extended Form Elements 扩展表单元素</h3>
<p>大多数前端开发者都了解jQuery的作用。它帮助你编写更平滑的JavaScript代码，而且更短小整洁。自由开源的jQuery插件有它的市场，现在的需求很旺盛。</p>

<p><a href="http://www.unheap.com/section/inputs-forms/"><img src="http://hack.the-lifematrix.net/images/02-jquery-unheap-form-inputs.jpg" alt="" /></a></p>

<p>围绕那些能<strong><em>增强用户体验</em></strong>的jQuery表单有特别的热情。这些效果包括浮动标签(floating labels)，输入校验(input validation)，指导性提示(guided tooltips)，几乎任何你可以想象到的。看一下<a href="http://www.unheap.com/section/inputs-forms/">Unheap form gallery</a>, 它编目了开源jQuery插件，你可以下载并在新项目中测试。</p>

<h3 id="deeply-focused-landing-pages-landing">4. Deeply-Focused Landing Pages 深度聚焦的Landing页面</h3>
<p>iOS App Store刚启动时，开发者们吵闹着要发布他们下一个创意。过了几年，我们已经有几百万个针对iOS+Android设备的应用。许多这样的App甚至有它们自己的同伴网站。</p>

<p><a href="http://wipmessenger.com"><img src="http://hack.the-lifematrix.net/images/03-wip-messenger-iphone-app-homepage.jpg" alt="" /></a></p>

<p>一些开发者经常购买一个域名，发布一个网站作为营销工具。这个点子后来已经扩展到包括移动游戏，开源脚本，智能手机App，事实上任何你能想到的数字产品。从根本上来说，对于鼓励潜在客户在购买前多了解产品，这些网页是必可不少的。</p>

<p><a href="http://www.hongkiat.com/blog/mobile-app-landing-pages/">20 Gorgeous Mobile App Landing Pages</a></p>

<p><em>译者注：关于landing page的解释见Wiki <a href="http://en.wikipedia.org/wiki/Landing_page">http://en.wikipedia.org/wiki/Landing_page</a></em></p>

<h3 id="html5-">5. HTML5 视频播放器</h3>
<p>虽然必要时，Flash仍有用处，但大多数Web开发者认同，Internet视频的未来是HTML5。高度推荐两个脚本：<a href="http://www.videojs.com/">Video.js</a> 和 <a href="http://mediaelementjs.com/">MediaElement.js</a>。第一个更简单，只局限于基本功能。</p>

<p><a href="http://mediaelementjs.com/"><img src="http://hack.the-lifematrix.net/images/04-media-element-js-jquery-homepage.jpg" alt="" /></a></p>

<p>Media Element为你构造自己的播放器设备计，提供了一些缺省的皮肤和更为优秀的文档。你也可以用此代码构造一个音乐或音频播放器。除过API之外，两个脚本都提供了文档。它们都是很好的js库。当你在未来的项目中需要<strong>自有主机的视频(self-hosted videos)</strong>时，请记着这些。</p>

<p>也请阅读: <a href="http://www.hongkiat.com/blog/html5-videos-things-you-need-to-know/">10 Things Designers Need To Know About HTML5 Videos</a></p>

<h3 id="d--transition-effects">6. 3D 渐变效果 (Transition Effects)</h3>
<p>在过去的一年中，我已经从更多的网站中发现了一些创造性的3D动画。它们经常构建在一些页面中，其包含有动画效果的画廊、导航菜单和元素。3D效果可以用jQuery来创建，虽然CSS3正追赶过来。</p>

<p>不用说，所有浏览器并没有完全支持动画，设计者必须小心不要在一个页面中使用太多的动画。然而如果你愿意尝试新事物，我强烈推荐搜索这样的 <a href="http://codepen.io/tag/3d/">3D animated code examples</a> 去把玩。</p>

<h3 id="flat-design-elements-">7. Flat Design Elements 扁平化设计元素</h3>
<p>在讨论web设计趋势时，不能忽略广泛应用的 <a href="http://www.hongkiat.com/blog/tag/flat-ui/">flat UI</a> 元素。CSS3允许设计者使用自然盒子阴影、文本阴影或圆角，创建更为平面的按钮。这一平面UI模式已经扩展到表单输入，甚至导航菜单。</p>

<p>但是，在不久的未来，还有更多的可以期待。很多网站已经免费发布了 <a href="http://www.hongkiat.com/blog/long-shadow-flat-icons/">平面图标集(Flat icon sets)</a> 和 <a href="http://www.hongkiat.com/blog/webapp-design-resources/">GUI kits</a>。
在本文作者的文章 <a href="http://www.hongkiat.com/blog/flat-design-resources/">guide to flat web design</a> 中，你可以找到一堆堆可免费下载的PSD/AI图像。从微软的Windows操作系统到Window Mobile Phone，地铁风格(metro-style)的布局已经普及了。</p>

<p>也请阅读：<a href="http://www.hongkiat.com/blog/flat-ui-design-showcase/">Showcase Of Beautiful Flat UI Design</a></p>

<h3 id="personal-portraits-">8. Personal Portraits 个人肖像</h3>
<p>简单的个人概况网站(portfolio websites)也值得关注。你想传递一些关于你是谁、你曾在哪里的信息，并展示你的工作样例。为了让人们真正感兴趣，你需要建立人性的连接(human connection)。做到这点的最好途径之一，是在你页面的某个地方加入你相片的样张。</p>

<p><a href="http://www.andreamann.com/"><img src="http://hack.the-lifematrix.net/images/05-andrea-mann-jazz-vocalist-homepage.jpg" alt="" /></a></p>

<p><a href="http://www.andreamann.com/">Andrea Mann</a> 使用了一张占据主页很大幅面的相片。这也与更暗的背景融为一体，重新将色彩调为黑白灰度 (recolored to shades of B&amp;W)。尽管你不需要在你的网站上使用 <a href="http://www.hongkiat.com/blog/oversized-background-image-design/">大幅背景肖像(large background portraits)</a>，但这的确很奇妙。甚至在你主页上一个小的相片或about页面，也能让访问者瞥见你是谁。</p>

<h3 id="svg-">9. SVG 图像或图标</h3>
<p><a href="http://www.vectorstock.com">基于矢量的图形(vector-based graphics)</a> 不是建立在像素，而是建立在线和坐标上。通过数学公式将单独的形状(shape)组织起来，这允许你将矢量拉伸到任何尺寸。<a href="http://www.hongkiat.com/blog/scalable-vector-graphic/">SVG (Scalable Vector Graphics) 图像</a> 能容易被加工而不损失太多质量，在这个意义上有些像<a href="http://www.vectorstock.com">矢量图形</a>。</p>

<p>最大的问题是所有浏览器对这些图像的支持度。许多人仍然使用IE(internet Explorer)的旧版本和其它遗留的浏览器。这是一个巨大的趋势，需要好几年掠过Internet才能到来(如果它没开始的话)。</p>

<p><strong>也请阅读：<a href="http://www.hongkiat.com/blog/tag/scalable-vector-graphics/">More On Scalable Vector Graphics</a></strong></p>

<p>如果你真的想开始，我可能推荐<a href="http://codepen.io/tag/svg">codepen</a>, 一个开放的社区驱动的IDE，让开发者在线分享他们的工作。<a href="http://snapsvg.io/">Snap.svg</a>是一个JavaScript库，致力于让多浏览器自然地支持SVG图像。这是有点更细节的主题，但如果你好奇，值得深入探索。</p>

<h3 id="unique-web-copy-web">10. Unique Web Copy 唯一Web拷贝</h3>
<p>Web开发中最酷的新特性之一是 <strong>@face-font申明</strong>。你能导入在本地或外部远端服务器的字体文件。这些字体在CSS中定义，你能在<strong>font-family</strong>属性引用它们，从而设计你的web页字体。</p>

<p>这已经发展到包含<a href="http://www.hongkiat.com/blog/webfont-icons/">基于字体的图标(font-based icons)</a>，这里灵活的字体在页面上可以象文本一样被渲染。相比真实的图形可结合大量不同的颜色，这些图标的设计没那么优良。但是，简单地能在页面上定制化任何字体，就能让你的网站在人群中脱颖而出。</p>

<h3 id="lazy-loading-animations-">11. Lazy-Loading Animations 延迟加载动画</h3>
<p>主题森林(themeforest)有很多WordPress主题，它有一些应用到元素上的渐变效果，但只有在你将它们滚动到视图里才会出现动画。这些元素的表现和延迟加载图片相似，除过它们已经被加载到页面但被隐藏起来。</p>

<p>使用JavaScript很容易探测到哪些元素在视图里，然后使用CSS3渐变或JavaScript来实现动画。</p>

<p><a href="http://www.chartjs.org/"><img src="http://hack.the-lifematrix.net/images/06-chartjs-homepage-layout-script.jpg" alt="" /></a></p>

<p>如果你想下滚动<a href="http://www.chartjs.org/">Chart.js</a>的页面，你将发现内容+图像的块，开始慢慢地消失在视线中(fade into view)。这个趋势大概不能节省带宽，除非你有意识地等到需要时将内容载入。这更多地是关于<strong>页面美学(about page aesthetics)</strong>，为你的访问者提供柔顺的界面(a sleek interface for you visitors)。</p>

<h3 id="customized-image-galleries-">12. Customized Image Galleries 定制的图片画廊</h3>
<p>JavaScript和CSS不断地集成，允许开发者创造独特的新项目。<a href="http://www.hongkiat.com/blog/image-slider-photoshop-jquery-nivo-slider/">Image Galleries</a>是一个已经持续数十年的趋势。步入2014年，我们可以期待甚至对<a href="http://www.hongkiat.com/blog/free-responsive-image-gallery/">旋转木马(dynamic carousels)</a>和图像光盒(Image lightboxes)更精彩的方案。</p>

<p><a href="http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/"><img src="http://hack.the-lifematrix.net/images/07-elastic-stack-photos-tutorial.jpg" alt="" /></a></p>

<p>提供一个小例子，看一下<a href="http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/">在codrops上这个最近的画廊教程</a>，它使用了弹性拖拽效果去在相片之间切换。这有点实验性的，但是你能看出开发者如何愿意推开边界，去看看什么是可能的。</p>

<p>如果你喜欢这个概念，为什么不看下<a href="http://jquer.in/category/jquery-plugins-for-awesome-image-galleries/">jQuery画廊插件</a>呢？这将是开始学习的更快策略，随着时间，你甚至能构建你自己的画廊插件。</p>

<h3 id="mega-navigation-menus-">13. Mega-Navigation Menus 巨大导航菜单</h3>
<p>近年来，所有奇特的新导航种类都被测试和采用了。除过<a href="http://www.hongkiat.com/blog/tag/series-html5-css3-tuts/">HTML5/CSS3</a>规范，移动响应式Web是这方面的大头。有一个关于<a href="http://codepen.io/jreece/pen/ocjGI">mega navigation menus</a>很小却在增长的趋势，为了容纳内容和链接的大块，它做了扩充。</p>

<p><a href="http://mashable.com/"><img src="http://hack.the-lifematrix.net/images/08-mashable-mega-dropdown-navigation.jpg" alt="" /></a></p>

<p>这在以很大的容量发布许多独特内容的网站上，最为普遍。立即浮现脑海的，是在线杂志或web论坛。它的确占据了页面的一点空间，但它也给读者更宽广的选择去导航你的站点。</p>

<p>在Smashing Magazine上偶然撞见的一篇相关文章，谈到有关 <a href="http://www.smashingmagazine.com/2013/03/27/navigation-mega-sites/">大型站点的导航菜单(navigation menus for mega-sites)</a> 的所有事情。概念是相似的，任何对这一趋势感兴趣的人，前面所提供的例子，都是好的起步点。</p>

<h3 id="expanding-search-bars-">14. Expanding Search Bars 扩展搜索栏</h3>
<p>回头一看，不能完全确定这一概念是否正在加速。但是，在你的布局中构造半隐藏或扩展的搜索栏(semi-hidden or expanding search bars)，正不断流行。用户点击放大镜图标，或点击进入表单本身，然后它扩展变宽，允许输入更多文本。</p>

<p><a href="http://tympanus.net/codrops/2013/06/26/expanding-search-bar-deconstructed/"><img src="http://hack.the-lifematrix.net/images/09-expanding-search-bar-tutorial.jpg" alt="" /></a></p>

<p>关于这个主题，Codrops编写了很出色的<a href="http://tympanus.net/codrops/2013/06/26/expanding-search-bar-deconstructed/">教程</a>，对任何开发者，就极具可读性。隐藏输入域的第一个用处是节省页面空间。你甚至可以在顶部隐藏表单，象导航菜单一样切换它上/下(toggle it up/down like a navigation menu)。这个技术在响应式布局中最为突出，但在甚至更大、更完整的设计中也包含了这些可适应的搜索域(adaptable search fields)。</p>

<h3 id="featured-detail-lists-">15. Featured Detail Lists 有特色的详情列表</h3>
<p>最近，在网站上发现的featured detail lists都放在一个<a href="http://blog.teamtreehouse.com/50-homepage-website-layouts-using-featured-details-icon-lists">设计展示</a>中。这是面向列表的详细资料，解释有关公司或产品的信息。详细资料经常连同一些图标来以更简洁的方式说明要点。</p>

<p>这些详细资料列表已经成为很多主页的主要部分。汇集的有关产品或服务的任何信息，将让访问者愿意多看看。它对你提供一些洞见：提供什么内容给客户，及其如何一起工作(It gives some insight towards what you provide to customers and how it all works)。当快速滚动页面时，<a href="http://www.hongkiat.com/blog/category/free-icons/">图标</a>象糖霜(frosting)一样能吸引注意力。</p>

<h3 id="mobile-first-design-">16. Mobile-First Design 移动优先设计</h3>
<p>前阵子，<strong>Luke Wroblewski</strong>的书<a href="http://www.abookapart.com/products/mobile-first">Mobile First</a>给出这一观点。当浏览一个站点时，不太可能轻易地辨识设计过程是如果进行的。但这个想法是，首先对你的站点在移动屏幕上如何看起来象一个响应性布局去搭建雏形(mock-up)。消减所有多余的不成功的尝试、只保留尽可能少的基本要素(Eliminate all the excess fluff and keep only the bare essentials)。</p>

<p>从这个观点看，将你的设计向上扩展到更为宽阔的屏幕，会非常容易。导航菜单更宽了，内容被拉长，还连同一个边栏(sidebar)。移动优先的设计将移动体验放在更高的优先级，这然后成为整个布局的基线(then becomes a baseline for the entire layout)。这个概念值得拥抱。希望设计者试着实践它，看看它如何影响设计的工作流和最终的结果。</p>

<h3 id="html5--1">17. HTML5 画布</h3>
<p>关于<a href="http://html5doctor.com/an-introduction-to-the-canvas-2d-api/">画布元素(canvas element)</a>有很多可以讲的，这确实是一个研究的主题。使用JavaScript, 恰在HTML5里面就能创造出游戏或绘画应用。曾经见过，通过鼠标来<a href="http://thomasjbradley.ca/lab/signature-pad/require-drawn/">收集签名</a>的画布元素。</p>

<p><a href="http://codepen.io/jackrugile/pen/Gving"><img src="http://hack.the-lifematrix.net/images/10-canvas-based-loader-animation.jpg" alt="" /></a></p>

<p>上面的例子来自一个简单的codepen条目。有人发布一个有光泽的加载圈到Dribble(Someone posted a glossy loading circle onto Dribbble)，这个笔是使用画布元素的一个仿制。另一个例子是构建在HTML5画布和JavaScript上的这个小<a href="http://codepen.io/motorlatitude/pen/Aybmz">水平加载条(horizontal loading bar)</a>。这种可能性增长很快，我们兴奋地期待看看2~3年后这样的画布会是什么。</p>

<h3 id="pixel-sprites--browser-games-">18. Pixel Sprites &amp; Browser Games 像素精灵和浏览器游戏</h3>
<p>很象经典的视频播放器，<a href="http://www.hongkiat.com/blog/chrome-experiments-games/">浏览器游戏(browser games)</a>过去完全在Adobe Flash中制作。但是JavaScript已经在社区中获得立足点，很多开发者很高兴去发布这类项目的开放源码。</p>

<p><a href="http://codepen.io/jkneb/details/smtHA"><img src="http://hack.the-lifematrix.net/images/11-pixel-sprite-game-example-codepen.jpg" alt="" /></a></p>

<p>早先，作者有一篇文章，详细说明了<a href="http://www.hongkiat.com/blog/pixel-based-websites/">以像素为中心的web站点(pixel-centric websites</a>，它也能使用动画。这些设计不常见，但能抓住你的注意力。它需要很多设计天赋来创造如此精巧的像素艺术品。因此构建你自己的浏览器内的精灵游戏，将是一个甚至更大的挑战。</p>

<p>刚入道时，最好的一个资源可以在<a href="http://html5gameengine.com/">HTML5 Game Engine</a>找到。这个站点罗列了很多自由的JavaScript库用于创建你自己的浏览器游戏。关于这个过程有很多可以学习的，但幸运地是，你能在Google中找到数以百计的教程。</p>

<h3 id="quick-user-registration-">19. Quick User Registration 快速用户注册</h3>
<p>有日益增加的创业公司和Web应用允许用户注册。事实上，许多服务要求你使用站点前先注册。在这个快节奏的世界，冗长的详细注册表单是极端令人扫兴的(tremendously off-putting)。</p>

<p><strong>尽量让所有注册表单快捷并切题(Try to keep all registration forms quick and to the point)</strong>。很多更新的webapp恰在首页包含注册表单，以抓住尽可能多的访问者。这样当一个访问者对你的产品好奇，看了表单只有2~4项，就决定去注册。你可能会惊讶，这种策略对抓住新客户如此有效。</p>

<p>也请阅读：<a href="http://www.hongkiat.com/blog/boosting-your-site-traffic-by-harnessing-your-subscribers-list/">Boosting Your Site Traffic By Harnessing Your Subscriber’s List</a></p>

<h3 id="css3-animated-keyframes-">20. CSS3 Animated Keyframes 动画关键帧</h3>
<p>自从新千年的早期，JavaScript就已是浏览器动画的主要选择。只到最近，CSS3才被主流采纳，开发者可使用@keyframe来制作他们自己的动画效果。</p>

<p><a href="http://codepen.io/aidentailor/pen/bqfzt"><img src="http://hack.the-lifematrix.net/images/12-css3-keyframe-animation-loaders.jpg" alt="" /></a></p>

<p>还有一个途径是使用<a href="http://css-tricks.com/almanac/properties/t/transition/">渐变属性(transition property)</a>，但是它针对动画只有一个状态，而关键帧(keyframes)表现得很像Adobe Flash。你设置一个从0%~100%的帧百分比值，定义随着时间改变的属性。最新的CSS3规范提供了足够的工具，让你以几乎任何喜欢的方式去给元素加上动画。</p>

<h3 id="section">结语</h3>
<p>较小的界面概念(smaller interface concepts)不是我们每天考虑的事情。但正是这些较小的重点让更聪明的网站布局得以诞生。希望本文能照亮一些设计趋势上，在未来的项目上我们将重点关注。如果本文对2014年的设计趋势有所遗漏，请在如下的评论区与我们分享。</p>

<h1 id="section-1">其它的资源</h1>

<p><a href="https://futureofwebdesign.com/nyc-2014/?utm_source=Future%20Insights&amp;utm_medium=Blog&amp;utm_campaign=Blog%20Event%20Widget">https://futureofwebdesign.com/nyc-2014/?utm_source=Future%20Insights&amp;utm_medium=Blog&amp;utm_campaign=Blog%20Event%20Widget</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Likelihood和Probability的区别]]></title>
    <link href="http://hack.the-lifematrix.net/blog/2014/10/likelihood-dot-vs-dot-probability/"/>
    <updated>2014-10-16T10:26:42+08:00</updated>
    <id>http://hack.the-lifematrix.net/blog/2014/10/likelihood-dot-vs-dot-probability</id>
    <content type="html"><![CDATA[<p>Likelihood(似然性)和Probalility(可能性)在机器学习和统计学中经常遇到，容易混淆。特别上网查询，以便澄清。</p>

<h2 id="section">几种说法</h2>
<p>### Mathworld
<a href="http://mathworld.wolfram.com/Likelihood.html">http://mathworld.wolfram.com/Likelihood.html</a></p>

<p><strong><em>Likelihood</em></strong> <em>is the hypothetical probability that an event that has already occurred would yield a specific outcome. The concept differs from that of a probability in that a probability refers to the occurrence of future events, while a likelihood refers to past events with known outcomes.</em></p>

<p>似然性是已发生的事件产生特定结果的假设概率。这个概念不同于概率的地方在于，概率指代未来事件的发生，而似然性指代有已知结果的过去事件。</p>

<h3 id="wiki">Wiki</h3>
<p><a href="http://en.wikipedia.org/wiki/Likelihood_function">http://en.wikipedia.org/wiki/Likelihood_function</a></p>

<p>*Likelihood functions play a key role in statistical inference, especially methods of estimating a parameter from a set of statistics. In informal contexts, “likelihood” is often used as a synonym for “probability.” But in statistical usage, a distinction is made depending on the roles of the outcome or parameter. Probability is used when describing a function of the outcome given a fixed parameter value. For example, if a coin is flipped 10 times and it is a fair coin, what is the probability of it landing heads-up every time? Likelihood is used when describing a function of a parameter given an outcome. For example, if a coin is flipped 10 times and it has landed heads-up 10 times, what is the likelihood that the coin is fair? *</p>

<p>在非正式的语境下，likelihood经常是probaility的同义词。但在统计学中，根据参数和输出的角色不同，用法上仍有不同。可能性，经常用于描述，当给定参数值时，输出的函数。例如，如果将一个硬币抛10次，而硬币没问题，那么它每次正面朝上的概率有多大？而Likelihood用于描述，当给定结果时，参数的函数。例如，如果抛硬币10次，每次都正面朝上，那么硬币没问题的似然性有多大？</p>

<h3 id="ben-klemens">Ben Klemens的文章</h3>
<p><a href="http://modelingwithdata.org/pdfs/024-like_probably.pdf">http://modelingwithdata.org/pdfs/024-like_probably.pdf</a></p>

<h2 id="section-1">总结</h2>

<ul>
  <li>Possibility(概率)是给定参数后，针对数据的函数。而Likelihood(似然性)是给定数据后，针对参数的函数。</li>
  <li>Possibility是后验的、可测量的、客观的。而Likelihood则是先验的、不可测量的，由人主观构思的。</li>
  <li>可以通过Bayes’s法则将二者联系起来
*</li>
</ul>
]]></content>
  </entry>
  
</feed>
